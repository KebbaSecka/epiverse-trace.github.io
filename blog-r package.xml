<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Epiverse-TRACE developer space</title>
<link>https://epiverse-trace.github.io/blog.html#category=R%20package</link>
<atom:link href="https://epiverse-trace.github.io/blog-r package.xml" rel="self" type="application/rss+xml"/>
<description>A place for Epiverse-TRACE developers to share their reflections, learnings, and showcase their work.</description>
<generator>quarto-1.4.156</generator>
<lastBuildDate>Mon, 05 Jun 2023 00:00:00 GMT</lastBuildDate>
<item>
  <title>Sharing the C++ Code of an Rcpp Package</title>
  <dc:creator>Pratik Gupte</dc:creator>
  <link>https://epiverse-trace.github.io/posts/share-cpp/index.html</link>
  <description><![CDATA[ 




<section id="why-share-c-code-from-an-rcpp-package" class="level2">
<h2 class="anchored" data-anchor-id="why-share-c-code-from-an-rcpp-package">Why share C++ code from an Rcpp package</h2>
<p>Using the <a href="https://www.rcpp.org/">{Rcpp}</a> package is the dominant method for linking the usability of R with the speed of C++, and can be used to write R packages that are fast and easy to use for both end-users and developers.</p>
<p>From the point of view of developers, it’s very easy to export R code such as functions and classes from an R(cpp) package, but the guidance in the <a href="https://www.rdocumentation.org/packages/Rcpp/versions/1.0.10">Rcpp documentation</a> does not detail how to export the C++ code so that it can be shared with your other Rcpp packages.</p>
<p>Allowing C++ code to be shared can be very beneficial for the same reasons that sharing R code is — packaging code is a reliable way to reuse it.</p>
<p>Some widely used examples of this practice are the <a href="https://cran.r-project.org/web/packages/RcppEigen/index.html">{RcppEigen}</a>, <a href="https://cran.r-project.org/web/packages/RcppArmadillo/index.html">{RcppArmadillo}</a>, <a href="https://cran.r-project.org/web/packages/RcppGSL/index.html">{RcppGSL}</a>, and <a href="https://cran.r-project.org/web/packages/BH/index.html">Boost Headers {BH}</a> packages. Indeed, in the Epiverse-TRACE team, {RcppEigen} underpins the <a href="https://github.com/epiverse-trace/finalsize">{finalsize}</a> and upcoming <a href="https://github.com/epiverse-trace/epidemics">{epidemics}</a> packages.</p>
</section>
<section id="two-ways-to-share-c-code" class="level2">
<h2 class="anchored" data-anchor-id="two-ways-to-share-c-code">Two ways to share C++ code?</h2>
<p>Developers searching for a way to make the C++ code of their Rcpp-based packages shareable will likely find two seemingly distinct ways of doing so.</p>
<ol type="1">
<li><p>Developers reading the Rcpp Attributes documentation will find that package C++ code can be shared by generating a C++ interface for functions that also have an R interface, <a href="https://dirk.eddelbuettel.com/code/rcpp/Rcpp-attributes.pdf">using Rcpp attributes</a>.</p></li>
<li><p>Developers instead scanning widely used Rcpp packages such as {RcppEigen} will notice that C++ code can also be shared by defining the majority of the C++ functions in a package header, to which other Rcpp packages can be linked.</p></li>
</ol>
<p>These are simply different pathways to the writing and export of an R(cpp) package header, which allows Rcpp to link the package’s C++ code to other packages.</p>
<p>This blog post explores different ways of doing this, and explains how the Rcpp packages from Epiverse-TRACE implement C++ code sharing.</p>
</section>
<section id="the-package-header" class="level2">
<h2 class="anchored" data-anchor-id="the-package-header">The package header</h2>
<p>The package header of the package <code>{mypackage}</code> is a file of the name <code>mypackage.h</code> under <code>inst/include</code>. Defining this header is the key step in making (R)C++ code shareable.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># conceptual organisation of an Rcpp package with a package header</span></span>
<span id="cb1-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">.</span></span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> DESCRIPTION</span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> NAMESPACE</span>
<span id="cb1-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> R</span>
<span id="cb1-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> └── RcppExports.R</span>
<span id="cb1-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> inst</span>
<span id="cb1-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> └── include</span>
<span id="cb1-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span>     └── mypackage.h       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &lt;= the package header</span></span>
<span id="cb1-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> src</span>
<span id="cb1-11">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> RcppExports.cpp</span>
<span id="cb1-12">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> rcpp_hello.cpp        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &lt;= code from which RcppExports.cpp generates</span></span></code></pre></div>
<section id="autogenerating-the-package-header" class="level3">
<h3 class="anchored" data-anchor-id="autogenerating-the-package-header">Autogenerating the package header</h3>
<p>The package header is autogenerated when the attributes of an Rcpp function are edited to also generate a C++ interface.</p>
<p>Consider the Rcpp function below which is exposed to R and exported from the package. The line <code>// [[Rcpp::interfaces(cpp)]]</code> instructs Rcpp to autogenerate two header files under <code>inst/include</code>:</p>
<ol type="1">
<li>A package header, called <code>mypackage.h</code>, and</li>
<li>A helper header called <code>mypackage_RcppExports.h</code> with ‘automagic’ C++ bindings for the function <code>hello_world_rcpp()</code>.</li>
</ol>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>src/rcpp_hello.cpp</strong></pre>
</div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;Rcpp.h&gt;</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// [[Rcpp::interfaces(cpp)]]</span></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' @title Test Rcpp function</span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' </span></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' @export</span></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//[[Rcpp::export]]</span></span>
<span id="cb2-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> hello_world_rcpp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-10">  Rcpp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>Rcout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello world!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
</section>
<section id="manually-creating-the-package-header" class="level3">
<h3 class="anchored" data-anchor-id="manually-creating-the-package-header">Manually creating the package header</h3>
<p>The package header can also be created manually, as <code>mypackage.h</code> under <code>inst/include</code>. In this case, the helper file <code>mypackage_RcppExports.h</code> is not generated.</p>
<p>Examples of this are the widely used {RcppEigen} and {RcppArmadillo} packages, while <a href="https://github.com/coatless-r-n-d/rcpp-shared-cpp-functions">this demonstration package by James Balamuta</a> is a minimal example that is a good place to get started to understand how this approach works.</p>
<p>The manually defined package header can initially be empty, and is populated by the developer — more on header contents below.</p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>It is possible to edit an autogenerated package header to include manually created header files in addition to <code>mypackage_RcppExports.h</code>. To do this, remove the generator tag (see below) to prevent this file from being overwritten by <code>Rcpp::compileAttributes()</code>. Then include any extra header files as usual.</p>
<p>We would however recommend not autogenerating headers from Rcpp functions, but rather writing a header-heavy package — this is the approach used by {RcppEigen} etc. (see more below on how we organise our packages).</p>
</div>
</div>
</section>
<section id="contents-of-the-package-header" class="level3">
<h3 class="anchored" data-anchor-id="contents-of-the-package-header">Contents of the package header</h3>
<p>We found it difficult to get information on the content of the package header.</p>
<p>Autogenerated package headers contain an autogeneration message and a generator token, similar to that present in <code>RcppExports</code> files. Package headers should contain a <a href="https://en.wikipedia.org/wiki/Include_guard">header include guard</a>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>The style of the header name in the include guard for autogenerated headers is <code>RCPP_mypackage_H_GEN_</code>. Package headers from the Rcpp core team, such as {RcppEigen} and {RcppArmadillo}, are manually defined and follow the convention <code>mypackage__mypackage__h</code>. In examples, <a href="https://github.com/coatless-r-n-d/rcpp-shared-cpp-functions">such as this bare-bones demonstration package by James Balamuta</a>, you might also encounter a single underscore (<code>_</code>) and a capital <code>H</code> (<code>mypackage_mypackage_H</code>).</p>
<p>If you are <a href="../lint-rcpp/">linting your Rcpp package’s C++ code</a> with <a href="https://github.com/cpplint/cpplint">Cpplint</a>, all three are incompatible with Cpplint’s preference, which is <code>DIR_SUBDIR_FILE_H</code>. Exclude the package header from linting to avoid this warning if you wish to follow an Rcpp community style instead.</p>
</div>
</div>
<p>The package header must also link to the code you want to export, and there are at least three ways of doing this.</p>
<ol type="1">
<li>Include the autogenerated file <code>mypackage_RcppExports.h</code>; this is already done as part of the package header generation.</li>
<li>Directly write C++ code in the package header. This is technically possible, but unlikely to be a good option as your package’s C++ codebase grows.</li>
<li>Manually include any other C++ header files in the package header. This last option might lead to a package header such as that shown below.</li>
</ol>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>inst/include/mypackage.h</strong></pre>
</div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Manually created package header with manual code inclusion</span></span>
<span id="cb3-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#ifndef mypackage_mypackage_H</span></span>
<span id="cb3-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define mypackage_mypackage_H</span></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// include files using paths relative to inst/include</span></span>
<span id="cb3-6"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">"header_01.h"</span></span>
<span id="cb3-7"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">"header_02.h"</span></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#endif  </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// mypackage_mypackage_H</span></span></code></pre></div>
</div>
<p>Here, the header files might contain code that you wish to make available to other packages, such as a C++ function, struct, or class, and indeed in the current package as well — more on how to do this below.</p>
</section>
</section>
<section id="using-rcpp-in-header-code" class="level2">
<h2 class="anchored" data-anchor-id="using-rcpp-in-header-code">Using Rcpp in header code</h2>
<p>Using {Rcpp}’s C++ functionality, such as the Rcpp classes <code>DataFrame</code> or <code>List</code>, or classes and functions of Rcpp-based packages such as {RcppEigen}, is as simple as including those headers in the appropriate location, just as one would in a source file — see the example below.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>inst/include/header_01.h</strong></pre>
</div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// In a manually created header file, say, header_01.h</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// which is included in mypackage.h</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// to use Rcpp</span></span>
<span id="cb4-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;Rcpp.h&gt;</span></span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// note the use of inline, more on this later</span></span>
<span id="cb4-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">inline</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> hello_world_rcpp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-9">  Rcpp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>Rcout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello world!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
<p>The appropriate headers are automatically included in autogenerated package headers’ helper files, and the developer need not do anything more.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Don’t forget to link to {Rcpp} or similar packages to the package under development by adding the package names under <code>Imports</code>, <code>Depends</code>, or <code>LinkingTo</code> as appropriate.</p>
<p>This can often be handled by functions in the {usethis} package such as <code>usethis::use_rcpp_eigen()</code>. You might also need to add <code>// [[Rcpp::depends(&lt;package&gt;)]]</code> in your package’s C++ source files, with a suitable package dependency specified.</p>
</div>
</div>
<p>The same principles apply to using C++ code from this package ({mypackage}) in future packages.</p>
</section>
<section id="using-header-code-in-the-package" class="level2">
<h2 class="anchored" data-anchor-id="using-header-code-in-the-package">Using header code in the package</h2>
<p>There are some considerations when seeking to use header code from {mypackage} within {mypackage} itself.</p>
<p>Any functions defined in the package headers must be inline functions (see the example above). This prevents compilation errors related to multiple definitions.</p>
<p>C++ source files should include the package header, using <code>#include mypackage.h</code>. Functions, structs, or classes defined in header files will be available from the namespace <code>mypackage</code>, as shown in the example below.</p>
<p>The code in header files will usually need to be wrapped in (R)C++ code that is exposed to R to make functions from the headers available in R — see the snippet below.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>mypackage/src/hello_world.cpp</strong></pre>
</div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// #include &lt;Rcpp.h&gt;       // include Rcpp if necessary</span></span>
<span id="cb5-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;mypackage.h&gt;</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">     </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// include package header</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Function exposed to R</span></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' @title Rcpp function wrapping a header function</span></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'</span></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' @export</span></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// [[Rcpp::export]]</span></span>
<span id="cb5-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> print_hello_world<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-10">  mypackage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>hello_world_rcpp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// note the namespacing</span></span>
<span id="cb5-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Remember to add <code>PKG_CPPFLAGS += -I../inst/include/</code> to both <code>Makevars</code> and <code>Makevars.win</code> under <code>src/</code>. Furthermore, as noted in the <a href="https://dirk.eddelbuettel.com/code/rcpp/Rcpp-attributes.pdf">Rcpp attributes documentation</a>, the package will not automatically cause a rebuild when headers are modified — this needs to be done manually.</p>
</div>
</div>
</section>
<section id="linking-header-code-between-pacakges" class="level2">
<h2 class="anchored" data-anchor-id="linking-header-code-between-pacakges">Linking header code between pacakges</h2>
<p>Once you have developed your package, you can link to its C++ header code in the same way as you would to any other Rcpp-based package.</p>
<p>Consider the snippet below which shows how to link the C++ code from {mypackage} in a different package called {yourpackage}.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>yourpackage/src/hello_world.cpp</strong></pre>
</div>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// [[Rcpp::depends(mypackage)]]   /// specify dependency</span></span>
<span id="cb6-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;mypackage.h&gt;</span></span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Define and export an Rcpp function</span></span>
<span id="cb6-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> print_linked_hello<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-6">  mypackage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>hello_world_rcpp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb6-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
<p>Be sure to add <code>LinkingTo: mypackage</code> in the <code>DESCRIPTION</code> of the second package {yourpackage}.</p>
</section>
<section id="c-code-sharing-in-epiverse-trace" class="level2">
<h2 class="anchored" data-anchor-id="c-code-sharing-in-epiverse-trace">C++ code sharing in Epiverse-TRACE</h2>
<p>In Epiverse-TRACE, we have structured the {finalsize} and {epidemics} packages to have manually created headers, following the principles laid out above. We follow some additional principles as well.</p>
<dl>
<dt>Header-heavy packages</dt>
<dd>
Our packages are header-heavy, so that most of the actual code is defined in the headers. The source files are primarily intended to contain wrappers that expose the header code to R (and our users).
</dd>
<dt>Namespaces to organise header code</dt>
<dd>
Our header code is organised into C++ namespaces, which makes it easier to understand where functions are likely to be defined, and what they might be related to. It also makes it possible to include the package headers (and namespaces) that are relevant to users, rather than including the entire codebase.
</dd>
</dl>
<p>As an example, functions related to non-pharmaceutical interventions or vaccination regimes from the {epidemics} package can be used in other packages without also including the compartmental epidemic models contained therein.</p>
</section>
<section id="ensuring-the-quality-of-header-code" class="level2">
<h2 class="anchored" data-anchor-id="ensuring-the-quality-of-header-code">Ensuring the quality of header code</h2>
<p>You can lint and statically check code in a package header using <a href="../lint-rcpp/">tools for linting C++ code such as Cpplint and Cppcheck</a>. When doing so, it may be important to specify minimum C++ standards, or even the language (C or C++) to avoid linter errors. This is because tools — such as Cppcheck — assume that headers with the extension <code>.h</code> are C headers, which throws errors when encountering C++ features such as the use of namespaces.</p>
<p>Cppcheck’s language and C++ standard can be set using:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cppcheck</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--std</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>c++14 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--language</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>c++ <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--enable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>warning,style <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--error-exitcode</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>1 inst/include/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>.h</span></code></pre></div>
<p>Furthermore, header code can also be tested independently of the R(cpp) code that eventually wraps it. This can be done using the <a href="https://github.com/catchorg/Catch2">Catch2 testing framework</a>, which is <a href="https://testthat.r-lib.org/reference/use_catch.html">conveniently available using {testthat}</a> — this is an extensive topic for another post.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Developing an Rcpp-based package with C++ code sharing in mind takes some organisation, or even reorganisation, of the C++ codebase. It is probably a good idea to consider whether your package will implement code that would be of interest to other developers, or to you in related projects. If either of these is true, it may help to structure your package with C++ code sharing in mind from the very beginning of development. This can substantially reduce development overheads and mistakes associated with maintaining multiple copies of the same or similar code in different projects. Fortunately, some great examples of how to do this are among the most-used Rcpp-based packages, providing both a conceptual template to consult for your work, as well as being a demonstration of how beneficial this practice can be in the long run. In Epiverse-TRACE, we intend to continue developing with C++ code sharing as a core principle so that we and other developers can build on our initial work.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{gupte2023,
  author = {Gupte, Pratik},
  title = {Sharing the {C++} {Code} of an {Rcpp} {Package}},
  date = {2023-06-05},
  url = {https://epiverse-trace.github.io//posts/share-cpp},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-gupte2023" class="csl-entry quarto-appendix-citeas">
Gupte, Pratik. 2023. <span>“Sharing the C++ Code of an Rcpp
Package.”</span> June 5, 2023. <a href="https://epiverse-trace.github.io//posts/share-cpp">https://epiverse-trace.github.io//posts/share-cpp</a>.
</div></div></section></div> ]]></description>
  <category>code sharing</category>
  <category>R</category>
  <category>R package</category>
  <category>Rcpp</category>
  <category>interoperability</category>
  <guid>https://epiverse-trace.github.io/posts/share-cpp/index.html</guid>
  <pubDate>Mon, 05 Jun 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Extending Data Frames</title>
  <dc:creator>Joshua W. Lambert</dc:creator>
  <link>https://epiverse-trace.github.io/posts/extend-dataframes/index.html</link>
  <description><![CDATA[ 




<section id="extending-data-frames-in-r" class="level2">
<h2 class="anchored" data-anchor-id="extending-data-frames-in-r">Extending Data Frames in R</h2>
<p>R is a commonly used language for data science and statistical computing. Foundational to this is having data structures that allow manipulation of data with minimal effort and cognitive load. One of the most commonly required data structures is tabular data. This can be represented in R in a few ways, for example a matrix or a data frame. The data frame (class <code>data.frame</code>) is a flexible tabular data structure, as it can hold different data types (e.g.&nbsp;numbers, character strings, etc.) across different columns. This is in contrast to matrices – which are arrays with dimensions – and thus can only hold a single data type.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># data frame can hold heterogeneous data types across different columns</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  a b c
1 1 4 a
2 2 5 b
3 3 6 c</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># each column must be of the same type</span></span>
<span id="cb3-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"4"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># be careful of the silent type conversion</span></span>
<span id="cb3-4">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>a</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2 3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>b</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "4" "5" "6"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb7-2">mat</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    1    4    7
[2,]    2    5    8
[3,]    3    6    9</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">mat[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># be careful of the silent type conversion</span></span>
<span id="cb9-3">mat</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,] "1"  "4"  "7" 
[2,] "2"  "5"  "8" 
[3,] "3"  "6"  "9" </code></pre>
</div>
</div>
<p>Data frames can even be nested, cells can be data frames or lists.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>)</span>
<span id="cb11-2">df[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"z"</span>))</span>
<span id="cb11-3">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     a b
1 y, z x</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>)</span>
<span id="cb13-2">df[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">d =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"z"</span>))</span>
<span id="cb13-3">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     a b
1 y, z x</code></pre>
</div>
</div>
<p>It is therefore clear why data frames are so prevalent. However, they are not without limitations. They have a relatively basic printing method which can fload the R console when the number of columns or rows is large. They have useful methods (e.g., <code>summary()</code> and <code>str()</code>), but these might not be appropriate for certain types of tabular data. In these cases it is useful to utilise R’s inheritance mechanisms (specifically S3 inheritance) to write extensions for R’s <code>data.frame</code> class. In this case the data frame is the superclass and the new subclass extends it and inherits its methods (see <a href="https://adv-r.hadley.nz/s3.html#s3-inheritance">the <em>Advanced R</em> book</a> for more details on S3 inheritance).</p>
<p>One of the most common extension of the data frame is the <code>tibble</code> from the {tibble} R package. Outlined in <a href="https://tibble.tidyverse.org/articles/tibble.html">{tibble}’s vignette</a>, <code>tibble</code>s offer improvements in printing, subsetting and recycling rules. Another commonly used data frame extension is the <code>data.table</code> class from the <a href="https://github.com/Rdatatable/data.table">{data.table} R package</a>. In addition to the improved printing, this class is designed to improve the performance (i.e.&nbsp;speed and efficiency of operations and storage) of working with tabular data in R and provide a terse syntax for manipulation.</p>
<p>In the process of developing R software (most likely an R package), a new tabular data class that builds atop data frames can become beneficial. This blog post has two main sections:</p>
<ol type="1">
<li>a brief overview of the steps required to setup a class that extends data frames</li>
<li>guide to the technical aspects of class invariants (required data members of a class) and design and implementation decisions, and tidyverse compatibility</li>
</ol>
<section id="writing-a-custom-data-class" class="level3">
<h3 class="anchored" data-anchor-id="writing-a-custom-data-class">Writing a custom data class</h3>
<p>It is useful to write a class constructor function that can be called to create an object of your new class. The functions defined below are a redacted version (for readability) of functions available in the <a href="https://github.com/joshwlambert/ExtendDataFrames">{ExtendDataFrames} R package</a>, which contains example functions and files discussed in this post. When assigning the class name ensure that it is a vector containing <code>"data.frame"</code> as the last element to correctly inherit properties and methods from the <code>data.frame</code> class.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">birthdays <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb15-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the vector of classes is required for it to inherit from `data.frame`</span></span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"birthdays"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.frame"</span>))</span>
<span id="cb15-4">}</span></code></pre></div>
<p>That’s all that’s needed to create a subclass of a data frame. However, although we’ve created the class we haven’t given it any functionality and thus it will be identical to a data frame due to inheritance.</p>
<p>We can now write as many methods as we want. Here we will show two methods, one of which does not require writing a generic (<code>print.birthdays</code>) and the second that does (<code>birthdays_per_month</code>). The <code>print()</code> generic function is provided by R, which is why we do not need to add one ourselves. See <a href="https://adv-r.hadley.nz/s3.html#s3-methods">Adv R</a> and this <a href="https://epiverse-trace.github.io/posts/s3-generic/">Epiverse blog post</a> to find out more about S3 generics.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">print.birthdays <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(</span>
<span id="cb16-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(</span>
<span id="cb16-4">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A `birthdays` object with %s rows and %s cols"</span>,</span>
<span id="cb16-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(x)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(x)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb16-6">    )</span>
<span id="cb16-7">  )</span>
<span id="cb16-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(x)</span>
<span id="cb16-9">}</span>
<span id="cb16-10"></span>
<span id="cb16-11">birthdays_per_month <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb16-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UseMethod</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"birthdays_per_month"</span>)</span>
<span id="cb16-13">}</span>
<span id="cb16-14"></span>
<span id="cb16-15">birthdays_per_month.birthdays <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb16-16">  out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(lubridate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">month</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>birthday))</span>
<span id="cb16-17">  months <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb16-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jan"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feb"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mar"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Apr"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"May"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jun"</span>,</span>
<span id="cb16-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jul"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Aug"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sep"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Oct"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nov"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dec"</span></span>
<span id="cb16-20">  )</span>
<span id="cb16-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(out) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> months[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(out))]</span>
<span id="cb16-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(out)</span>
<span id="cb16-23">}</span></code></pre></div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Useful resources for the “Writing custom data class” section: <a href="https://tibble.tidyverse.org/articles/extending.html">extending <code>tibbles</code> and their functionality</a></p>
</div>
</div>
</section>
<section id="design-decision-around-class-invariants" class="level3">
<h3 class="anchored" data-anchor-id="design-decision-around-class-invariants">Design decision around class invariants</h3>
<p>We will now move on to the second section of the post, in which we discuss the design choices when creating and using S3 classes in R. <strong><em>Class invariants</em></strong> are members of your class that define it. In other words, without these elements your class does not fulfil its basic definition. It is therefore sensible to make sure that your class contains these elements at all times (or at least after operations have been applied to your class). In cases when the class object contains all the invariants normal service can be continued. However, in the case that an invariant is missing or modified to a non-conformist type (e.g.&nbsp;a date converted to a numeric) a decision has to be made. Either the code can error, hopefully giving the user an informative message as to why their modification broke the object; alternatively, the subclass can be revoked and the superclass can be returned. In almost all cases the superclass (i.e.&nbsp;the base class being inherited from) is more general and won’t have the same class invariant restrictions.</p>
<p>For our example class, <code>&lt;birthdays&gt;</code>, the invariants are a column called <code>name</code> which must contain characters, and a column called <code>birthday</code> which must contain dates. The order of the rows and columns is not considered an invariant property, and having extra columns with other names and data types is also allowed. The number of rows is also not an invariant as we can have as many birthdays as we like in the data object.</p>
<p>Here we present both cases as well as considerations and technical details of both options. We’ll demonstrate both of these cases with the subset function in R (subsetting uses a single square bracket for tabular data, <code>[</code>). First the fail-on-subsetting. Before we write the subsetting function it is useful to have a function that checks that an object of our class is valid, a so-called validator function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">validate_birthdays <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(</span>
<span id="cb17-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input must contain 'name' and 'birthday' columns"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb17-4">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"birthday"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(x)),</span>
<span id="cb17-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"names must be a character"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb17-6">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>name),</span>
<span id="cb17-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"birthday must be a date"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb17-8">      lubridate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.Date</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>birthday)</span>
<span id="cb17-9">  )</span>
<span id="cb17-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(x)</span>
<span id="cb17-11">}</span></code></pre></div>
</div>
<p>This will return an error if the class is not valid (defined in terms of the class’ invariants).</p>
<p>Now we can show how to error if one of the invariants are removed during subsetting. See <code>?NextMethod()</code> for information on method dispatch.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[.birthdays</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">validate_birthdays</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NextMethod</span>())</span>
<span id="cb18-3">}</span>
<span id="cb18-4"></span>
<span id="cb18-5">birthdays[, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb18-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  Error in validate_birthdays(NextMethod()) :</span></span>
<span id="cb18-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  input must contain 'name' and 'birthday' columns</span></span></code></pre></div>
</div>
<p>The second design option is the reconstruct-on-subsetting. This checks whether the class is valid, and if not downgrade the class to the superclass, in our case a data frame. This is done by not only validating the object during subsetting but to check whether it is a valid class object, and then either ensuring all of the attributes of the subclass – in our case <code>&lt;birthdays&gt;</code> – are maintained, or attributes are stripped and only the attributes of the base superclass – in our case <code>data.frame</code> – are kept.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Important note: this section of the post relies heavily on <a href="https://github.com/DavisVaughan/2020-06-01_dplyr-vctrs-compat" class="uri">https://github.com/DavisVaughan/2020-06-01_dplyr-vctrs-compat</a>.</p>
</div>
</div>
<p>The four functions that are required to be added to ensure our class is correctly handled when invaliding it are:</p>
<ul>
<li><code>birthdays_reconstruct()</code></li>
<li><code>birthdays_can_reconstruct()</code></li>
<li><code>df_reconstruct()</code></li>
<li><code>dplyr_reconstruct.birthdays()</code></li>
</ul>
<p>We’ll tackle the first three first, and then move onto to the last one as this requires some extra steps.</p>
<p><code>birthdays_reconstruct()</code> is a function that contains an if-else statement to determine whether the returned object is a <code>&lt;birthdays&gt;</code> or <code>data.frame</code> object.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">birthdays_reconstruct <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, to) {</span>
<span id="cb19-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">birthdays_can_reconstruct</span>(x)) {</span>
<span id="cb19-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">df_reconstruct</span>(x, to)</span>
<span id="cb19-4">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb19-5">     x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(x)</span>
<span id="cb19-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Removing crucial column in `&lt;birthdays&gt;` returning `&lt;data.frame&gt;`"</span>)</span>
<span id="cb19-7">    x</span>
<span id="cb19-8">  }</span>
<span id="cb19-9">}</span></code></pre></div>
</div>
<p>The if-else evaluation is controlled by <code>birthdays_can_reconstruct()</code>. This function determines whether after subsetting the object is a valid <code>&lt;birthdays&gt;</code> class. It checks whether the validator fails, in which case it returns <code>FALSE</code>, otherwise the function will return <code>TRUE</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">birthdays_can_reconstruct <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb20-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check whether input is valid</span></span>
<span id="cb20-3">  valid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tryCatch</span>(</span>
<span id="cb20-4">    { <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">validate_birthdays</span>(x) },</span>
<span id="cb20-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">error =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(cnd) <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb20-6">  )</span>
<span id="cb20-7"></span>
<span id="cb20-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return boolean</span></span>
<span id="cb20-9">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isFALSE</span>(valid)</span>
<span id="cb20-10">}</span></code></pre></div>
</div>
<p>The next function required is <code>df_reconstruct()</code>. This is called when the object is judged to be a valid <code>&lt;birthdays&gt;</code> object and simply copies the attributes over from the <code>&lt;birthdays&gt;</code> class to the object being subset.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">df_reconstruct <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, to) {</span>
<span id="cb21-2">  attrs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attributes</span>(to)</span>
<span id="cb21-3">  attrs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(x)</span>
<span id="cb21-4">  attrs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>row.names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.row_names_info</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> 0L)</span>
<span id="cb21-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attributes</span>(x) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> attrs</span>
<span id="cb21-6">  x</span>
<span id="cb21-7">}</span></code></pre></div>
</div>
<p>The three functions defined for reconstruction can be added to a package with the subsetting function in order to subset <code>&lt;birthdays&gt;</code> objects and returning either <code>&lt;birthdays&gt;</code> objects if still valid, or data frames when invalidated. This design has the benefit that when conducting data exploration a user is not faced with an error, but can continue with a data frame, while being informed by the message printed to console in <code>birthdays_reconstruct()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[.birthdays</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb22-2">  out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NextMethod</span>()</span>
<span id="cb22-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">birthdays_reconstruct</span>(out, x)</span>
<span id="cb22-4">}</span></code></pre></div>
</div>
</section>
<section id="compatibility-with-dplyr" class="level3">
<h3 class="anchored" data-anchor-id="compatibility-with-dplyr">Compatibility with {dplyr}</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span></code></pre></div>
</div>
<p>In order to be able to operate on our <code>&lt;birthdays&gt;</code> class using functions from the package {dplyr}, as would be common for data frames, we need to make our function compatible. This is where the function <code>dplyr_reconstruct.birthdays()</code> comes in. <code>dplyr_reconstruct()</code> is a generic function exported by {dplyr}. It is called in {dplyr} verbs to make sure that the objects are restored to the input class when not invalidated.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">dplyr_reconstruct.birthdays <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, template) { <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nolint</span></span>
<span id="cb24-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">birthdays_reconstruct</span>(data, template)</span>
<span id="cb24-3">}</span></code></pre></div>
</div>
<p>Information about the generic can be found through the {dplyr} help documentation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">?dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>dplyr_extending</span>
<span id="cb25-2">?dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>dplyr_reconstruct</span></code></pre></div>
</div>
<p>As explained in the help documentation, {dplyr} also uses two base R functions to perform data manipulation. <code>names&lt;-</code> (i.e the names setter function) and <code>[</code> the one-dimensional subsetting function. We therefore define these methods for our custom class in order for <code>dplyr_reconstruct()</code> to work as intended.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[.birthdays</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb26-2">  out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NextMethod</span>()</span>
<span id="cb26-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">birthdays_reconstruct</span>(out, x)</span>
<span id="cb26-4">}</span>
<span id="cb26-5"></span>
<span id="cb26-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names&lt;-.birthdays</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, value) {</span>
<span id="cb26-7">  out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NextMethod</span>()</span>
<span id="cb26-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">birthdays_reconstruct</span>(out, x)</span>
<span id="cb26-9">}</span></code></pre></div>
</div>
<p>This wraps up the need for adding function to perform data manipulation using the reconstruction design outlined above.</p>
<p>However, there is some final housekeeping to do. In cases when {dplyr} is not a package dependency (either imported or suggested), then the S3 generic <code>dplyr_reconstruct()</code> is required to be loaded. In R versions before 3.6.0 – this also works for R versions later than 3.6.0 – the generic function needs to be registered. This is done by writing an <code>.onLoad()</code> function, typically in a file called <code>zzz.R</code>. This is included in the {ExtendDataFrames} package for illustrative purposes.</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>zzz.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">.onLoad <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(libname, pkgname) {</span>
<span id="cb27-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s3_register</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dplyr::dplyr_reconstruct"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"birthdays"</span>)</span>
<span id="cb27-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>()</span>
<span id="cb27-4">}</span></code></pre></div>
</div>
</div>
<p>The <code>s3_register()</code> function used in <code>.onLoad()</code> also needs to be added to the package and this function is kindly supplied by both {vctrs} and {rlang} unlicensed and thus can be copied into another package. See the <a href="https://r-pkgs.org/dependencies-mindset-background.html#sec-dependencies-attach-vs-load">R packages book</a> for information about <code>.onLoad()</code> and attaching and loading in general.</p>
<p>Since R version 3.6.0 this <a href="https://blog.r-project.org/2019/08/19/s3-method-lookup/index.html">S3 generic registration</a> happens automatically with <code>S3Method()</code> in the package namespace using the {roxygen2} documentation <code>#' @exportS3Method dplyr::dplyr_reconstruct</code>.</p>
<p>There is one last option which prevents the hard dependency on a relatively recent R version. Since {roxygen2} version 6.1.0, there is the <code>@rawNamespace</code> tag which allows insertion of text into the NAMESPACE file. Using this tag the following code will check the local R version and register the S3 method if equal to or above 3.6.0.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @rawNamespace if (getRversion() &gt;= "3.6.0") {</span></span>
<span id="cb28-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   S3method(pkg::fun, class)</span></span>
<span id="cb28-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' }</span></span></code></pre></div>
</div>
<p>Each of the three options for registering S3 methods has different benefits and downsides, so the choice depends on the specific use-case. Over time it may be best to use the most up-to-date methods as packages are usually only maintained for a handful of recent R releases<sup>1</sup>.</p>
<p>The topics discussed in this post have been implemented in the <a href="https://github.com/epiverse-trace/epiparameter">{epiparameter} R package</a> within <a href="https://github.com/epiverse-trace">Epiverse-TRACE</a>.</p>
<p>Compatibility with {vctrs} is also possible using the same mechanism (functions) described in this post, and if interested see <a href="https://github.com/DavisVaughan/2020-06-01_dplyr-vctrs-compat" class="uri">https://github.com/DavisVaughan/2020-06-01_dplyr-vctrs-compat</a> for details.</p>
<p>For other use-cases and discussions of the designs and implementations discussed in this post see:</p>
<ul>
<li><a href="https://github.com/tidymodels/dials">{dials} R package</a></li>
<li><a href="https://github.com/tidymodels/rsample">{rsample} R package</a></li>
<li><a href="https://github.com/tidyverse/googledrive">{googledrive} R package</a></li>
<li><a href="https://github.com/tidyverse/tibble/issues/890">Pull request on {tibble} R package</a></li>
</ul>
<p>This blog post is a compendium of information from sources that are linked and cited throughout. Please refer to those sites for more information and as the primary source for citation in further work.</p>


</section>
</section>
<aside id="footnotes" class="footnotes footnotes-end-of-document">
<hr>
<ol>
<li id="fn1"><p>This is the working practise of tidyverse packages: <a href="https://www.tidyverse.org/blog/2019/04/r-version-support/">https://www.tidyverse.org/blog/2019/04/r-version-support/</a>↩︎</p></li>
</ol>
</aside>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{w. lambert2023,
  author = {W. Lambert, Joshua},
  title = {Extending {Data} {Frames}},
  date = {2023-04-12},
  url = {https://epiverse-trace.github.io//posts/extend-dataframes},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-w. lambert2023" class="csl-entry quarto-appendix-citeas">
W. Lambert, Joshua. 2023. <span>“Extending Data Frames.”</span> April
12, 2023. <a href="https://epiverse-trace.github.io//posts/extend-dataframes">https://epiverse-trace.github.io//posts/extend-dataframes</a>.
</div></div></section></div> ]]></description>
  <category>data frame</category>
  <category>R</category>
  <category>R package</category>
  <category>interoperability</category>
  <category>S3 class</category>
  <category>dplyr</category>
  <guid>https://epiverse-trace.github.io/posts/extend-dataframes/index.html</guid>
  <pubDate>Wed, 12 Apr 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Convert Your R Function to an S3 Generic: Benefits, Pitfalls &amp; Design Considerations</title>
  <dc:creator>Hugo Gruson</dc:creator>
  <link>https://epiverse-trace.github.io/posts/s3-generic/index.html</link>
  <description><![CDATA[ 




<p>To build a tight and well-integrated data pipeline, it may be desirable to rely on <a href="https://en.wikipedia.org/wiki/Object-oriented_programming">object orientation (OO)</a> to automatically pass valuable information from one step to the other. OO and data classes can also act as a compatibility layer standardising outputs from various tools under a common structure.</p>
<p>But many packages and software start as standalone projects, and don’t always stem from a careful consideration of the larger ecosystem. In this situation, developers often see little benefit of using an OO system in their project initially.</p>
<p>But as the project matures, and as the position of the tool in the wider ecosystem becomes clearer, they may want to start using OO to benefit from the better integration it may provide with other tools upstream and downstream in the data pipeline. However, by then, their tool likely has an established community of users, and it is important to tread carefully with breaking changes.</p>
<p>In this blog post, we show that it’s possible to start using an S3 OO system almost invisibly in your R package, with minimal disruption to your users. We detail some minor changes that will nonetheless occur, and which pitfalls you should be looking out for. Finally, we take a step back and reflect how you should ensure you are a good open-source citizen in this endeavour.</p>
<section id="benefits" class="level1">
<h1>Benefits</h1>
<p>Let’s reuse the example function from <a href="../statistical-correctness/">one of our previous posts</a>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb1-2">centroid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(coords, weights) {</span>
<span id="cb1-3"></span>
<span id="cb1-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb1-5"></span>
<span id="cb1-6">}</span></code></pre></div>
</div>
<p>Since we wrote and released this function, someone may have designed a clever data class to store coordinates of a set of points and their weights. Let’s imagine they use the following class that they call <code>pointset</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">example_pointset <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(</span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb2-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">coords =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)),</span>
<span id="cb2-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weights =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-5">  ),</span>
<span id="cb2-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pointset"</span></span>
<span id="cb2-7">)</span></code></pre></div>
</div>
<p>They may also have developed nice utilities for this class so there is a clear motivation for you to integrate with their class since it’s less work you’ll have to do. Plus, you immediately become compatible with any package that uses the same class.</p>
<p>We will not spend too much time on the practical steps to operate this conversion since this is already covered in details in <a href="https://adv-r.hadley.nz/s3.html">the dedicated chapter of Advanced R, by Hadley Wickham</a>, as well as <a href="https://njtierney.github.io/r/missing%20data/rbloggers/2016/11/06/simple-s3-methods/">this blog post from Nick Tierney</a> <sup>1</sup>. But the final result would be:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Compute the centroid of a set of points</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param coords Coordinates of the points as a list of vectors. Each element of</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   the list is a point.</span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param weights Vector of weights applied to each of the points</span></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @returns A vector of coordinates of the same length of each element of </span></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   `coords`</span></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   </span></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @examples</span></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' centroid(</span></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   list(c(0, 1, 5, 3), c(8, 6, 4, 3), c(10, 2, 3, 7)),</span></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   weights = c(1, 1, 1)</span></span>
<span id="cb3-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' )</span></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' </span></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb3-17">centroid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(coords, weights) {</span>
<span id="cb3-18"></span>
<span id="cb3-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UseMethod</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"centroid"</span>) </span>
<span id="cb3-20"></span>
<span id="cb3-21">}</span>
<span id="cb3-22"></span>
<span id="cb3-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @rdname centroid</span></span>
<span id="cb3-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' </span></span>
<span id="cb3-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb3-26">centroid.default <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(coords, weights) {</span>
<span id="cb3-27"></span>
<span id="cb3-28">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb3-29"></span>
<span id="cb3-30">}</span>
<span id="cb3-31"></span>
<span id="cb3-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @rdname centroid</span></span>
<span id="cb3-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' </span></span>
<span id="cb3-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb3-35">centroid.pointset <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(coords, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weights =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb3-36"></span>
<span id="cb3-37">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">centroid</span>(coords<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>coords, coords<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>weights)</span>
<span id="cb3-38"></span>
<span id="cb3-39">}</span></code></pre></div>
</div>
</section>
<section id="what-subtle-changes-should-you-be-looking-out-for" class="level1">
<h1>What subtle changes should you be looking out for?</h1>
<p>You may already have noticed a couple of minor changes in the example above but some changes are even less evident and easy to forget, hence this blog post.</p>
<section id="all-methods-must-have-the-same-arguments-as-the-generic" class="level2">
<h2 class="anchored" data-anchor-id="all-methods-must-have-the-same-arguments-as-the-generic">All methods must have the same arguments as the generic</h2>
<p>You can see that the method for <code>pointset</code> class, <code>centroid.pointset()</code> has a <code>weights</code> argument, even though it is not used because weights are already contained in the <code>coords</code> object. This seems clunky and potentially confusing for users. But this is mandatory because all methods must have the same arguments as the generic.</p>
<p>Another option here could have been to remove <code>weights</code> from the generic, and add <code>...</code> instead, thus allowing to pass <code>weights</code> as an extra argument only in selected methods. This is more idiomatic in R, and in line with the <a href="https://cran.r-project.org/doc/manuals/R-exts.html#Generic-functions-and-methods">recommendation from the official ‘Writing R Extensions’ document (“always keep generics simple”)</a>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb4-2">centroid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(coords, ...) { </span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UseMethod</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"centroid"</span>) </span>
<span id="cb4-4">}</span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @rdname centroid</span></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' </span></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb4-9">centroid.default <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(coords, weights, ...) {</span>
<span id="cb4-10"></span>
<span id="cb4-11">  coords_mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do.call</span>(rbind, coords)</span>
<span id="cb4-12">  </span>
<span id="cb4-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(coords_mat, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, weighted.mean, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">w =</span> weights))</span>
<span id="cb4-14">  </span>
<span id="cb4-15">}</span></code></pre></div>
</div>
<p>But this extra <code>...</code> argument, which is documented as “ignored”, may be confusing as well.</p>
</section>
<section id="more-complex-documentation-presentation" class="level2">
<h2 class="anchored" data-anchor-id="more-complex-documentation-presentation">More complex documentation presentation</h2>
<p>On the topic of arguments, another pitfall related to the conversion to an S3 generic is the change in the documentation. Below is a collage of before / after the change. This is quite minor and some users may not even notice it but I remember it was very confusing to me when I started using R and I didn’t really know what S3 or OO was: “what do you mean, ‘Default S3 method’, which case applies to me?”</p>
<div class="quarto-layout-panel">
<div class="quarto-layout-row quarto-layout-valign-bottom">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://epiverse-trace.github.io/posts/s3-generic/before_conversion.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Screenshot of the <code>centroid()</code> documentation before conversion to an S3 generic</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://epiverse-trace.github.io/posts/s3-generic/after_conversion.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Screenshot of the <code>centroid()</code> documentation after conversion to an S3 generic</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>The answer is that “Default S3 method” lists the arguments for <code>centroid.default()</code>, i.e., the method which is used if no other method is defined for your class. Arguments for all methods are usually documented together but you should only focus on those present in the call after the comment stating “S3 method for class ‘XXX’” for the class you’re working with.</p>
</section>
<section id="more-complicated-error-traceback" class="level2">
<h2 class="anchored" data-anchor-id="more-complicated-error-traceback">More complicated error traceback</h2>
<p>Another situation where converting to an S3 adds an extra layer of complexity is where you are trying to follow the error <a href="https://en.wikipedia.org/wiki/Stack_trace">traceback</a>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">centroid</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</div>
<p><img src="https://epiverse-trace.github.io/posts/s3-generic/error_trace.png" class="img-fluid"></p>
<p>In this example, we see one extra line that did not exist when <code>centroid()</code> was a regular function, rather than a generic:</p>
<blockquote class="blockquote">
<p>centroid.default(3) at centroid.R#19</p>
</blockquote>
<p>This line corresponds to the dispatch operation.</p>
<p>However, this slight difference in behaviour is likely not a big issue as we mostly expect experienced users to interact with the traceback. These users are likely to be familiar with S3 dispatch and understand the traceback in any case.</p>
</section>
<section id="extra-source-of-bugs-during-dispatch" class="level2">
<h2 class="anchored" data-anchor-id="extra-source-of-bugs-during-dispatch">Extra source of bugs during dispatch</h2>
<p>On a related note, the extra step introduced by this conversion to generic is another potential source of bugs. This doesn’t really impact your users directly but it does mean that as a developer, you will maintaining slightly more complex code and you will need to be more careful when making any changes. However, as always, a robust testing suite should help you catch any error before it makes it to production.</p>
</section>
</section>
<section id="where-should-the-generic-methods-live" class="level1">
<h1>Where should the generic &amp; methods live?</h1>
<p>In the previous section, we mentioned that you may want to rely on existing, established S3 classes. How does it work in practice when you want to add a method for a class outside of your package? Do you need to import the package where the class is defined? On the other side of the fence, as a class developer, is it okay to provide methods for generics provided in other packages? If you have the choice, should the method live in the package defining the generic or the class?</p>
<section id="where-should-the-generic-live" class="level2">
<h2 class="anchored" data-anchor-id="where-should-the-generic-live">Where should the generic live?</h2>
<p>The generic should always live in the package implementing the actual computation in the function in the first place. For example, if you defined the original <code>centroid()</code> function in a package called geometryops, the S3 generic should also be defined in that package, not in the package defining the <code>pointset</code> class.</p>
<p>It is possible in theory to overwrite a function defined by another package with a generic (“overloading”). For example, we could overload base R <code>table()</code> function with:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(...) { </span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UseMethod</span>(...)</span>
<span id="cb6-3">}</span>
<span id="cb6-4"></span>
<span id="cb6-5">table.default <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(</span>
<span id="cb6-6">  ...,</span>
<span id="cb6-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">exclude =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (useNA <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NaN</span>),</span>
<span id="cb6-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">useNA =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ifany"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"always"</span>),</span>
<span id="cb6-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dnn =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.names</span>(...), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">deparse.level =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb6-10">) {</span>
<span id="cb6-11"></span>
<span id="cb6-12"> base<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(</span>
<span id="cb6-13">  ...,</span>
<span id="cb6-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">exclude =</span> exclude,</span>
<span id="cb6-15">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">useNA =</span> useNA,</span>
<span id="cb6-16">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dnn =</span> dnn</span>
<span id="cb6-17"> )</span>
<span id="cb6-18"></span>
<span id="cb6-19">}</span></code></pre></div>
</div>
<p>But this is generally considered bad practice, and possibly rude <sup>2</sup>. As a rule of thumb, you should usually avoid:</p>
<ul>
<li>name collisions with functions from other packages (especially base or recommended package);</li>
<li>light wrappers around a function from another package as this may be seen as an attempt to steal citations and credit.</li>
</ul>
</section>
<section id="where-should-the-methods-live" class="level2">
<h2 class="anchored" data-anchor-id="where-should-the-methods-live">Where should the methods live?</h2>
<p>For methods, there is more flexibility than for generics. They could either in the package defining the class, or in the package defining the generic. Let’s present the practical setup in both cases, as well as each strategy pros &amp; cons.</p>
<section id="method-in-the-class-package" class="level3">
<h3 class="anchored" data-anchor-id="method-in-the-class-package">Method in the class package</h3>
<p>This is the strategy used when you defined a new class and provide it with a <code>print()</code>, a <code>summary()</code>, or a <code>plot()</code> method. The generics for these functions are defined in R base.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb7-2">plot.myclass <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, y, ...) {</span>
<span id="cb7-3">  </span>
<span id="cb7-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># code for a beautiful plot for your custom class</span></span>
<span id="cb7-5">  </span>
<span id="cb7-6">}</span></code></pre></div>
</div>
<p>If you opt for this strategy, you will need to depend on the package providing the method, as <code>Imports</code>. For example, a package defining a <code>fit.myclass()</code> method for the <code>fit()</code> generic defined in the <a href="https://generics.r-lib.org/">generics</a> package would have the following <code>DESCRIPTION</code> and <code>NAMESPACE</code>.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>DESCRIPTION</strong></pre>
</div>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Imports</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  generics</span></span></code></pre></div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>fit.myclass.R</strong></pre>
</div>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @importFrom generics fit</span></span>
<span id="cb9-3">fit.myclass <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb9-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># your code here</span></span>
<span id="cb9-5">}</span></code></pre></div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>NAMESPACE</strong></pre>
</div>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generated by roxygen2: do not edit by hand</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">S3method</span>(fit,myclass)</span>
<span id="cb10-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">importFrom</span>(generics,fit)</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Importing the generic
</div>
</div>
<div class="callout-body-container callout-body">
<p>It’s worth insisting that you need to import the generic in your <code>NAMESPACE</code> for the method to be recognized and exported correctly by roxygen2. In this specific situation, simply explicitly prefixing the generic call (<code>generic::fit()</code>) is not enough.</p>
</div>
</div>
<p>But this can lead to a <a href="https://www.mail-archive.com/r-package-devel@r-project.org/msg02720.html">rapid increase in the number of dependencies</a> if you provide methods for generics from various packages. Since R 3.6, you can also put generics in <code>Suggests</code> and <a href="https://roxygen2.r-lib.org/articles/namespace.html#s3-methods-for-generics-in-suggested-packages">use delayed assignment</a>:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>DESCRIPTION</strong></pre>
</div>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Suggests</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb11-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  generics</span></span></code></pre></div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>fit.myclass.R</strong></pre>
</div>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @exportS3Method generics::fit</span></span>
<span id="cb12-2">fit.myclass <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb12-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># your code here</span></span>
<span id="cb12-4">}</span></code></pre></div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>NAMESPACE</strong></pre>
</div>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generated by roxygen2: do not edit by hand</span></span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">S3method</span>(generics<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>fit,myclass)</span></code></pre></div>
</div>
</section>
<section id="method-in-the-generic-package" class="level3">
<h3 class="anchored" data-anchor-id="method-in-the-generic-package">Method in the generic package</h3>
<p>Alternatively, you can define the method in the package defining the generic. This is the approach taken in the <a href="https://easystats.github.io/report/">report package</a> from example, which defines the <code>report()</code> generic and methods for various model outputs produced by different package.</p>
<p>In theory, no <code>Imports</code> or <code>Suggests</code> is required here:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb14-2">mygeneric <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, ...) { </span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UseMethod</span>(x)</span>
<span id="cb14-4">}</span>
<span id="cb14-5"></span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb14-7">mygeneric.externalclass <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb14-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># your code here</span></span>
<span id="cb14-9">}</span></code></pre></div>
</div>
<p>However, if you end up providing many methods for a specific class, you could put the package defining it in the uncommon <code>Enhances</code> field. <code>Enhances</code> is defined in ‘<a href="https://cran.r-project.org/doc/manuals/r-release/R-exts.html">Writing R Extensions</a>’ as:</p>
<blockquote class="blockquote">
<p>The ‘Enhances’ field lists packages “enhanced” by the package at hand, e.g., by providing methods for classes from these packages.</p>
</blockquote>
<p>It may be a good idea to explicitly signal the strong relationship between both packages so that the package defining the method is checked as a reverse dependency, and informed of potential breaking changes as discussed below. You may see an example of this in the <a href="https://cran.r-project.org/package=slam">slam package</a>, which provides his methods for both base matrices and sparse matrices, as defined in the Matrix and the spam packages.</p>
</section>
<section id="coordination-between-maintainers" class="level3">
<h3 class="anchored" data-anchor-id="coordination-between-maintainers">Coordination between maintainers</h3>
<p>No matter the strategy you end up choosing, we strongly recommend you keep an open communication channel between the class package and the generic package developer (provided they are not the same person) as breaking changes will impact both parties.</p>
</section>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>As we’ve seen here, there are clear benefits to converting your standard function to an S3 generic. This can be done <strong>almost</strong> transparently but we’ve highlighting some subtle changes you may want to consider before pulling the switch.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Spreading the S3 love
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you like S3 and find it helpful to convert your function to an S3 class, you should keep propagating the S3 love by also adding an S3 class to your function output.</p>
<p>With this in mind, in the very first example where we converted our <code>centroid()</code> function to an S3 generic to handle <code>pointset</code> objects, we could also make our output a <code>pointset</code> object.</p>
</div>
</div>


</section>
<aside id="footnotes" class="footnotes footnotes-end-of-document">
<hr>
<ol>
<li id="fn1"><p>Note that we focus here on the S3 framework but R has other object orientation frameworks, as discussed in <a href="https://adv-r.hadley.nz/oo.html">the relevant section of the ‘Advanced R’ book by Hadley Wickham</a>↩︎</p></li>
<li id="fn2"><p>Every rule has its exceptions though such as the <a href="https://generics.r-lib.org/">generics</a> package, built by prominent members of the R developer community, which overloads base R functions such as <code>as.factor()</code> or <code>as.difftime()</code>.↩︎</p></li>
</ol>
</aside>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{gruson2023,
  author = {Gruson, Hugo},
  title = {Convert {Your} {R} {Function} to an {S3} {Generic:}
    {Benefits,} {Pitfalls} \&amp; {Design} {Considerations}},
  date = {2023-02-20},
  url = {https://epiverse-trace.github.io//posts/s3-generic},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-gruson2023" class="csl-entry quarto-appendix-citeas">
Gruson, Hugo. 2023. <span>“Convert Your R Function to an S3 Generic:
Benefits, Pitfalls &amp; Design Considerations.”</span> February 20,
2023. <a href="https://epiverse-trace.github.io//posts/s3-generic">https://epiverse-trace.github.io//posts/s3-generic</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>R package</category>
  <category>object orientation</category>
  <category>S3</category>
  <category>interoperability</category>
  <guid>https://epiverse-trace.github.io/posts/s3-generic/index.html</guid>
  <pubDate>Mon, 20 Feb 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Improving the C++ Code Quality of an Rcpp Package</title>
  <dc:creator>Pratik Gupte</dc:creator>
  <link>https://epiverse-trace.github.io/posts/lint-rcpp/index.html</link>
  <description><![CDATA[ 




<section id="use-case" class="level2">
<h2 class="anchored" data-anchor-id="use-case">Use case</h2>
<p>The R package development ecosystem includes packages such as <a href="https://lintr.r-lib.org/">{lintr}</a> and <a href="https://styler.r-lib.org">{styler}</a> that can help to check code style, and to format R code.</p>
<p>However, these packages cannot lint or style the C++ code of <a href="https://www.rcpp.org/">{Rcpp}</a> packages. This could leave the C++ code of an Rcpp package less clean than the R code, increasing the technical debt already associated with using two languages.</p>
<p>In Epiverse-TRACE, we encounter this issue with <a href="https://epiverse-trace.github.io/finalsize/">{finalsize}</a>, and we anticipate the same issue with further epidemic modelling packages that we seek to develop or adapt, such as <a href="https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1005838">{fluEvidenceSynthesis}</a>.</p>
<p>Our use-case is not unique, of course, and other projects could have their own solutions. One such, from which we have borrowed some ideas, is the <a href="https://arrow.apache.org/">Apache Arrow project</a>, whose R package also uses a C++ backend (via <a href="https://cpp11.r-lib.org/">{cpp11}</a> rather than {Rcpp}).</p>
</section>
<section id="choice-of-c-linters" class="level2">
<h2 class="anchored" data-anchor-id="choice-of-c-linters">Choice of C++ linters</h2>
<p>C++ linters such as <a href="https://clang.llvm.org/extra/clang-tidy/"><em>clang-tidy</em></a> stumble when dealing with C++ code in <code>src/</code>, as the <em>clang</em> toolchain attempts to compile it. This does not work for Rcpp packages, as the <code>Rcpp.h</code> header cannot be found — this linking is handled by {Rcpp}.</p>
<p>Fortunately, other C++ linters and code checking tools are available and can be used safely with Rcpp packages.</p>
<p>We have chosen to use <em>cpplint</em> and <em>cppcheck</em> for {finalsize}.</p>
<section id="cpplint" class="level3">
<h3 class="anchored" data-anchor-id="cpplint">Cpplint</h3>
<p><a href="https://github.com/cpplint/cpplint"><em>cpplint</em></a> is a tool that checks whether C/C++ files follow <a href="http://google.github.io/styleguide/cppguide.html">Google’s C++ style guide</a>. <em>cpplint</em> is easy to install across platforms, and does not error when it cannot find <code>Rcpp.h</code>.</p>
<p>Importantly, <em>cpplint</em> can be instructed to not lint the autogenerated <code>RcppExports.cpp</code> file, which follows a different style.</p>
<p>To lint all other <code>.cpp</code> files, we simply run <code>cpplint</code> from the terminal.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cpplint</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--exclude</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"src/RcppExports.cpp"</span> src/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>.cpp</span></code></pre></div>
</section>
<section id="cppcheck" class="level3">
<h3 class="anchored" data-anchor-id="cppcheck">Cppcheck</h3>
<p><a href="https://cppcheck.sourceforge.io/"><em>cppcheck</em></a> is a static code analysis tool, that aims to “have very few false positives”. This is especially useful for the non-standard organisation of Rcpp projects compared to C++ projects.</p>
<p><em>cppcheck</em> can also be run locally and instructed to ignore the autogenerated <code>RcppExports.cpp</code> file, while throwing up issues with style.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cppcheck</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> src/RcppExports.cpp <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--enable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>style <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--error-exitcode</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>1 src</span></code></pre></div>
<p>Here, the <code>--enable=style</code> option lets <em>cppcheck</em> flag issues with style, acting as a second linter. This enables the <code>performance</code> and <code>portability</code> flags as well. (We have not found any difference when using <code>--enable=warning</code> instead.)</p>
<p>Enabling all checks (<code>--enable=all</code>) would flag two specific issues for {Rcpp} packages: (1) the <code>Rcpp*.h</code> headers not being found (of the class <code>missingIncludeSystem</code>), and (2) the solver functions not being used by any other C++ function (<code>unusedFunction</code>).</p>
<p>These extra options should be avoided in {Rcpp} packages, as the linking is handled for us, and the functions are indeed used later — just not by other C++ functions.</p>
<p>The <code>--error-exitcode=1</code> argument returns the integer <code>1</code> when an error is found, which is by convention the output for an error.</p>
</section>
</section>
<section id="adding-c-linting-to-ci-workflows" class="level2">
<h2 class="anchored" data-anchor-id="adding-c-linting-to-ci-workflows">Adding C++ linting to CI workflows</h2>
<p>Both <em>cpplint</em> and <em>cppcheck</em> can be easily added to continuous integration workflows. In Epiverse-TRACE, we use Github Actions. The C++ lint workflow we have implemented looks like this:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paths</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"src/**"</span></span>
<span id="cb3-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull_request</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">branches</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span></span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Cpp-lint-check</span></span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jobs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cpplint</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runs-on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ubuntu-latest</span></span>
<span id="cb3-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steps</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/checkout@v3</span></span>
<span id="cb3-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/setup-python@v2</span></span>
<span id="cb3-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pip install cpplint</span></span>
<span id="cb3-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cpplint --quiet --exclude="src/RcppExports.cpp" src/*.cpp</span></span>
<span id="cb3-18"></span>
<span id="cb3-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cppcheck</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runs-on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ubuntu-latest</span></span>
<span id="cb3-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steps</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/checkout@v3</span></span>
<span id="cb3-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> sudo apt-get install cppcheck</span></span>
<span id="cb3-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cppcheck -i src/RcppExports.cpp --quiet --enable=warning --error-exitcode=1 .</span></span></code></pre></div>
<p>The workflow is triggered when there are changes to files in <code>src/</code>, and on all pull requests.</p>
</section>
<section id="formatting-c-code" class="level2">
<h2 class="anchored" data-anchor-id="formatting-c-code">Formatting C++ code</h2>
<p>C++ code can be automatically formatted to avoid linter errors. An especially useful tool is <a href="https://clang.llvm.org/docs/ClangFormat.html"><em>clang-format</em></a>. Our code is styled to follow the <a href="https://google.github.io/styleguide/cppguide.html">Google C++ style guide</a> using:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># replace .cpp with .h to format headers</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">clang-format</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-style</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>google src/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>.cpp</span></code></pre></div>
<p>However, this also formats the autogenerated <code>RcppExports.cpp</code> file. It can be extra work to repeatedly undo this change and keep the original formatting, but <em>clang-format</em> does not provide an easy inline way to ignore this file.</p>
<p>Instead, <em>clang-format</em> can be passed all files except <code>RcppExports.cpp</code> to style using some simple shell commands. In smaller projects, it might be worth</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find</span> src <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-name</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.cpp"</span> ! <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-name</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RcppExports.cpp"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-exec</span> clang-format <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-style</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>google <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> {} <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\;</span></span></code></pre></div>
</section>
<section id="turning-off-linting-and-formatting" class="level2">
<h2 class="anchored" data-anchor-id="turning-off-linting-and-formatting">Turning off linting and formatting</h2>
<p>There are cases in which we might want to turn linting and formatting off. This might be when the linter does not agree with valid C++ code required in the project, or when the linters and stylers do not agree with each other. These tools are developed separately by large software projects with their own internal requirements, and solutions to issues encountered in their work: <em>clang-format</em> by LLVM (although specifying <code>-style=google</code>), and <em>cpplint</em> from Google’s work.</p>
<section id="linter-enforced-paradigms" class="level3">
<h3 class="anchored" data-anchor-id="linter-enforced-paradigms">Linter-enforced paradigms</h3>
<p>Sometimes, the linter or styler developer enforces both a style <em>and</em> the use of certain programming paradigms. An example from <em>cpplint</em> is when it warns against passing function arguments by reference, and prefers for these to be passed as pointers, or as constant references (<code>const int &amp;value</code>).</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb6-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> some_function<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> </span>
<span id="cb6-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* operations modifying value */</span></span>
<span id="cb6-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Passing the argument as a <code>const</code> reference would not serve the needs of this function, and passing by value is a valid strategy when we don’t want to get into the details of using pointers. (Note that this is typically an issue when large objects such as custom classes or structs are passed to a function multiple times.)</p>
<p>Similarly, <em>cpplint</em> will throw a warning about accessing variables using <code>std::move</code>, which is something we encounter in the Newton solver in {finalsize}. While not technically wrong for such a simple use case, the linter is correct to cautiously throw a warning nonetheless.</p>
</section>
<section id="linter-styler-disagreement" class="level3">
<h3 class="anchored" data-anchor-id="linter-styler-disagreement">Linter-styler disagreement</h3>
<p>One example of linter-styler disagreement is the use of <code>BOOST_FOREACH</code> from the <a href="https://www.boost.org/">Boost libraries</a> as an alternative to <code>for</code> loops. <em>clang-format</em> will insist on adding two spaces before the opening bracket: <code>BOOST_FOREACH  ()</code>. <em>cpplint</em> will insist on removing one space.</p>
<p><em>cpplint</em> and <em>clang-format</em> also disagree on the order of header inclusions, especially when both local and system headers are included.</p>
</section>
<section id="disabling-checks-on-code-chunks" class="level3">
<h3 class="anchored" data-anchor-id="disabling-checks-on-code-chunks">Disabling checks on code chunks</h3>
<p>Either of these cases could require disabling linting or formatting on some part of the code. It is possible to turn off linting using <em>cpplint</em> at particular lines using the comment <code>// NOLINT</code>. Multiple lines can be protected from linting as well.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// NOLINTBEGIN</span></span>
<span id="cb7-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>some C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> code here<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// NOLINTEND</span></span></code></pre></div>
<p>Alternatively, <em>clang-format</em> can be instructed to ignore chunks of code using comment messages too.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// clang-format off</span></span>
<span id="cb8-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>some C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> code here<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// clang-format on</span></span></code></pre></div>
</section>
</section>
<section id="linter-options-for-future-packages" class="level2">
<h2 class="anchored" data-anchor-id="linter-options-for-future-packages">Linter options for future packages</h2>
<p>{finalsize} is a relatively simple {Rcpp} package, with no C/C++ headers, and no C++ tests. However, future Epiverse-TRACE packages could be more similar to {fluEvidenceSynthesis}, and will have header files, and could also have <a href="https://github.com/catchorg/Catch2">C++ unit tests via the <em>catch</em> framework</a>.</p>
<p><em>cpplint</em> will demand that all local headers be prefixed with their directory (<code>src/</code>), but this would cause the code to break as {Rcpp} looks for a subdirectory called <code>src/src/</code>. This can be turned off by passing the filter option <code>--filter="-build/include_subdir"</code> to <em>cpplint</em>. Alternatively, we could place headers in a subdirectory such as <code>inst/include</code>.</p>
<p>Both <em>cpplint</em> and <em>cppcheck</em> can be instructed to ignore C++ test files using the <em>catch</em> testing framework provided by {testthat}. This prevents errors due to the specialised syntax provided by {testthat} in <code>testthat.h</code>, such as <code>context</code>.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for cpplint, add an extra exclude statement</span></span>
<span id="cb9-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cpplint</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>...<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> --exclude=<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"src/test*.cpp"</span> src/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>.cpp</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for cppcheck, suppress checks on test files</span></span>
<span id="cb9-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cppcheck</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>...<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> --suppress=<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>:src/test_<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>.cpp src</span></code></pre></div>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>It is actually somewhat surprising that there does not seem to be a canonical linter for C++ code in {Rcpp} packages. The methods laid out here are an initial implementation developed for use with the {finalsize} package, and the considerations here are a starting point. We shall be continuously evaluating how we ensure the quality of our C++ code as we encounter more use cases while developing future Epiverse-TRACE packages.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{gupte2023,
  author = {Gupte, Pratik},
  title = {Improving the {C++} {Code} {Quality} of an {Rcpp} {Package}},
  date = {2023-02-16},
  url = {https://epiverse-trace.github.io//posts/lint-rcpp},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-gupte2023" class="csl-entry quarto-appendix-citeas">
Gupte, Pratik. 2023. <span>“Improving the C++ Code Quality of an Rcpp
Package.”</span> February 16, 2023. <a href="https://epiverse-trace.github.io//posts/lint-rcpp">https://epiverse-trace.github.io//posts/lint-rcpp</a>.
</div></div></section></div> ]]></description>
  <category>code quality</category>
  <category>R</category>
  <category>R package</category>
  <category>Rcpp</category>
  <guid>https://epiverse-trace.github.io/posts/lint-rcpp/index.html</guid>
  <pubDate>Thu, 16 Feb 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Ensuring &amp; Showcasing the Statistical Correctness of your R Package</title>
  <dc:creator>Hugo Gruson</dc:creator>
  <link>https://epiverse-trace.github.io/posts/statistical-correctness/index.html</link>
  <description><![CDATA[ 




<p>We’re evolving in an increasingly data-driven world. And since critical decisions are taken based on results produced by data scientists and data analysts, they need to be be able to trust the tools they use. It is now increasingly common to add continuous integration to software packages and libraries, to ensure the code is not crashing, and that future updates don’t change your code output (snapshot tests). But one type of test still remains uncommon: tests for statistical correctness. That is, tests that ensure the algorithm implemented in your package actually produce the correct results.</p>
<p></p><div id="tweet-32570"></div><script>tweet={"url":"https:\/\/twitter.com\/AlexCEngler\/status\/1092123648834658305","author_name":"Alex Engler","author_url":"https:\/\/twitter.com\/AlexCEngler","html":"\u003Cblockquote class=\"twitter-tweet\" align=\"center\"\u003E\u003Cp lang=\"en\" dir=\"ltr\"\u003EDoes \u003Ca href=\"https:\/\/twitter.com\/rstudio?ref_src=twsrc%5Etfw\"\u003E@rstudio\u003C\/a\u003E have a position in the trustworthiness \/ validity of any ~statistical methods~ packages in \u003Ca href=\"https:\/\/twitter.com\/hashtag\/Rstats?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#Rstats\u003C\/a\u003E?\u003Cbr\u003E\u003Cbr\u003EOr, is there a list of packages that \u003Ca href=\"https:\/\/twitter.com\/rstudio?ref_src=twsrc%5Etfw\"\u003E@rstudio\u003C\/a\u003E considers &#39;approved&#39; and thus will recommend to clients?\u003C\/p\u003E&mdash; Alex Engler (@AlexCEngler) \u003Ca href=\"https:\/\/twitter.com\/AlexCEngler\/status\/1092123648834658305?ref_src=twsrc%5Etfw\"\u003EFebruary 3, 2019\u003C\/a\u003E\u003C\/blockquote\u003E\n\u003Cscript async src=\"https:\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"\u003E\u003C\/script\u003E\n","width":550,"height":null,"type":"rich","cache_age":"3153600000","provider_name":"Twitter","provider_url":"https:\/\/twitter.com","version":"1.0"};document.getElementById("tweet-32570").innerHTML = tweet["html"];</script><p></p>
<p>It is likely that most statistical package authors run some tests on their own during development but there doesn’t seem to be guidelines on how to test statistical correctness in a solid and standard way <sup>1</sup>.</p>
<p>In this blog post, we explore various methods to ensure the statistical correctness of your software. We argue that these tests should be part of your continuous integration system, to ensure your tools remains valid throughout its life, and to let users verify how you validate your package. Finally, we show how these principles are implemented in the Epiverse TRACE tools.</p>
<p>The approaches presented here are non-exclusive and should ideally all be added to your tests. However, they are presented in order of stringency and priority to implement. We also take a example of a function computing the centroid of a list of points to demonstrate how you would integrate the recommendations from this post with the <a href="https://testthat.r-lib.org/"><code>{testthat}</code> R package</a>, often used from unit testing:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Compute the centroid of a set of points</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param coords Coordinates of the points as a list of vectors. Each element of the </span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   list is a point.</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @returns A vector of coordinates of the same length of each element of </span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   `coords`</span></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   </span></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @examples</span></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' centroid(list(c(0, 1, 5, 3), c(8, 6, 4, 3), c(10, 2, 3, 7)))</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' </span></span>
<span id="cb1-12">centroid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(coords) {</span>
<span id="cb1-13"></span>
<span id="cb1-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb1-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Skip all the necessary input checking for the purpose of this demo</span></span>
<span id="cb1-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb1-17"></span>
<span id="cb1-18">  coords_mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do.call</span>(rbind, coords)</span>
<span id="cb1-19">  </span>
<span id="cb1-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colMeans</span>(coords_mat))</span>
<span id="cb1-21">  </span>
<span id="cb1-22">}</span></code></pre></div>
</div>
<section id="compare-your-results-to-the-reference-implementation" class="level1">
<h1>Compare your results to the reference implementation</h1>
<p>The most straightforward and most solid way to ensure your implementation is valid is to compare your results to the results of the reference implementation. The reference implementation can be a package in another language, an example with toy data in the scientific article introducing the method, etc.</p>
<p>For example, the <a href="https://github.com/fboehm/gemma2"><code>{gemma2}</code> R package</a>, which re-implements the methods from <a href="https://github.com/genetics-statistics/GEMMA">the GEMMA tool written in C++</a>, <a href="https://github.com/fboehm/gemma2/blob/ea3052f8609622f17224fb8ec5fd83bd1bceb33e/tests/testthat/test_calc_sigma.R#L34-L37">verifies that values produced by both tools match</a>:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Results of gemma2 equal those of GEMMA v 0.97"</span>, {</span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(Sigma_ee, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">18.559</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">12.3672</span>)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tolerance =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0001</span>)</span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(Sigma_uu, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">82.2973</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">41.9238</span>)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tolerance =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0001</span>)</span>
<span id="cb2-4">})</span></code></pre></div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example with <code>centroid()</code>
</div>
</div>
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(testthat)</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"centroid() in 1D produces the same results as mean()"</span>, {</span>
<span id="cb3-4"></span>
<span id="cb3-5">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_identical</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">centroid</span>(x), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(x)))</span>
<span id="cb3-8">  </span>
<span id="cb3-9">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test passed 😀</code></pre>
</div>
</div>
</div>
</div>
<p>Note that even if a <strong>reference</strong> implementation doesn’t exist, it is still good practice to compare your implementation to competing ones. Discrepancies might reveal a bug in your implementation or theirs but in any case, finding it out is beneficial to the community.</p>
<p>However, this approach cannot be used in all cases. Indeed, there may not be a reference implementation in your case. Or it might be difficult to replicate identical computations in the case of algorithm with stochasticity <sup>2</sup>.</p>
</section>
<section id="compare-to-a-theoretical-upper-or-lower-bound" class="level1">
<h1>Compare to a theoretical upper or lower bound</h1>
<p>An alternative strategy is to compare your result to theoretical upper or lower bound. This offers a weaker guarantee that your implementation and your results are correct but it can still allow you to detect important mistakes.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example with <code>centroid()</code>
</div>
</div>
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"centroid() is inside the hypercube containing the data points"</span>, {</span>
<span id="cb5-2">  </span>
<span id="cb5-3">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))</span>
<span id="cb5-4"></span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">centroid</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Reduce</span>(pmax, x)))</span>
<span id="cb5-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">centroid</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Reduce</span>(pmin, x)))</span>
<span id="cb5-7">  </span>
<span id="cb5-8">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test passed 😀</code></pre>
</div>
</div>
</div>
</div>
<p>You can see a <a href="https://github.com/epiverse-trace/finalsize/blob/a710767b38a9242f15ab4dcf18b02fb5b0bcf24f/tests/testthat/test-newton_solver_vary_r0.R#L1-L13">real-life example of this kind of test in the <code>{finalsize}</code> R package</a>. <code>{finalsize}</code> computes the final proportion of infected in a heterogeneous population according to an SIR model. Theory predicts that the number of infections is maximal in a well-mixed population:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculates the upper limit of final size given the r0</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The upper limit is given by a well mixed population</span></span>
<span id="cb7-3">upper_limit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(r0) {</span>
<span id="cb7-4">  f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(par) {</span>
<span id="cb7-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>r0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> par[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> par[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb7-6">  }</span>
<span id="cb7-7">  opt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">optim</span>(</span>
<span id="cb7-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">par =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fn =</span> f,</span>
<span id="cb7-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lower =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">upper =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb7-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Brent"</span></span>
<span id="cb7-11">  )</span>
<span id="cb7-12">  opt</span>
<span id="cb7-13">}</span></code></pre></div>
</section>
<section id="verify-that-output-is-changing-as-expected-when-a-single-parameter-varies" class="level1">
<h1>Verify that output is changing as expected when a single parameter varies</h1>
<p>An even looser way to test statistical correctness would be to control that output varies as expected when you update some parameters. This could be for example, checking that the values you return increase when you increase or decrease one of your input parameters.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example with <code>centroid()</code>
</div>
</div>
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"centroid() increases when coordinates from one point increase"</span>, {</span>
<span id="cb8-2">  </span>
<span id="cb8-3">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))</span>
<span id="cb8-4">  </span>
<span id="cb8-5">  y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x</span>
<span id="cb8-6">  y[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> y[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> </span>
<span id="cb8-7"></span>
<span id="cb8-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">centroid</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">centroid</span>(y)))</span>
<span id="cb8-9">  </span>
<span id="cb8-10">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test passed 🌈</code></pre>
</div>
</div>
</div>
</div>
<p>An example of this test in an actual R package can again be found <a href="https://github.com/epiverse-trace/finalsize/blob/787de9a8fa430d63d06d2bc052c7134c43d1ca69/tests/testthat/test-newton_solver.R#L76-L102">in the finalsize package</a>:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">r0_low <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3</span></span>
<span id="cb10-2">r0_high <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.3</span></span>
<span id="cb10-3"></span>
<span id="cb10-4">epi_outcome_low <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">final_size</span>(</span>
<span id="cb10-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r0 =</span> r0_low,</span>
<span id="cb10-6">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>...<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb10-7">)</span>
<span id="cb10-8">epi_outcome_high <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">final_size</span>(</span>
<span id="cb10-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r0 =</span> r0_high,</span>
<span id="cb10-10">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>...<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb10-11">)</span>
<span id="cb10-12"></span>
<span id="cb10-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Higher values of R0 result in a higher number of infectious in all groups"</span>, {</span>
<span id="cb10-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(</span>
<span id="cb10-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(epi_outcome_high<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>p_infected <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> epi_outcome_low<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>p_infected)</span>
<span id="cb10-16">  )</span>
<span id="cb10-17">})</span></code></pre></div>
</section>
<section id="conclusion-automated-validation-vs-peer-review" class="level1">
<h1>Conclusion: automated validation vs peer-review</h1>
<p>In this post, we’ve presented different methods to automatically verify the statistical correctness of your statistical software. We would like to highlight one more time that it’s important to run these tests are part of your regular integration system, instead of running them just once at the start of the development. This will prevent the addition of possible errors in the code and show users what specific checks you are doing. By doing so, you are transparently committing to the highest quality.</p>
<p><a href="https://notstatschat.rbind.io/2019/02/04/how-do-you-tell-what-packages-to-trust/">Multiple voices</a> <a href="https://twitter.com/hadleywickham/status/1092129977540231168">in the community</a> are pushing more towards peer-review as a proxy for quality and validity:</p>
<p></p><div id="tweet-58317"></div><script>tweet={"url":"https:\/\/twitter.com\/hadleywickham\/status\/1092129977540231168","author_name":"Hadley Wickham","author_url":"https:\/\/twitter.com\/hadleywickham","html":"\u003Cblockquote class=\"twitter-tweet\" align=\"center\"\u003E\u003Cp lang=\"en\" dir=\"ltr\"\u003EI don’t think we’d ever validate statistical methods. I’d look for other proxies like peer reviewed publications about the package. I generally prefer to trust _people_ rather than packages.\u003C\/p\u003E&mdash; Hadley Wickham (@hadleywickham) \u003Ca href=\"https:\/\/twitter.com\/hadleywickham\/status\/1092129977540231168?ref_src=twsrc%5Etfw\"\u003EFebruary 3, 2019\u003C\/a\u003E\u003C\/blockquote\u003E\n\u003Cscript async src=\"https:\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"\u003E\u003C\/script\u003E\n","width":550,"height":null,"type":"rich","cache_age":"3153600000","provider_name":"Twitter","provider_url":"https:\/\/twitter.com","version":"1.0"};document.getElementById("tweet-58317").innerHTML = tweet["html"];</script><p></p>
<p>We would like to highlight that automated validation and peer review are not mutually exclusive and answer slightly different purposes.</p>
<p>On the one hand, automated validation fails to catch more obscure bugs and edge cases. For example, a bug that would be difficult to detect via automated approach is the use of <a href="https://www.jottr.org/2020/09/22/push-for-statistical-sound-rng/">bad Random Number Generators when running in parallel</a>.</p>
<p>But on the other hand, peer-review is less scalable, and journals usually have some editorial policy that might not make your package a good fit. Additionally, peer-review usually happens at one point in time while automated validation can, and should, be part of the continuous integration system.</p>
<p>Ideally, peer-review and automated validation should work hand-in-hand, with review informing the addition of new automated valiation tests.</p>


</section>
<aside id="footnotes" class="footnotes footnotes-end-of-document">
<hr>
<ol>
<li id="fn1"><p>But see the <a href="https://www.alexpghayes.com/post/2019-06-07_testing-statistical-software/">“testing statistical software” post from Alex Hayes</a> where he presents his process to determine if he deems a statistical package trustworthy or not, and <a href="https://stats-devguide.ropensci.org/">rOpenSci Statistical Software Peer Review book</a>.↩︎</p></li>
<li id="fn2"><p>Setting the random seed is not enough to compare implementations across programming languages because different languages use different kind of Random Number Generators.↩︎</p></li>
</ol>
</aside>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{gruson2023,
  author = {Gruson, Hugo},
  title = {Ensuring \&amp; {Showcasing} the {Statistical} {Correctness} of
    Your {R} {Package}},
  date = {2023-02-13},
  url = {https://epiverse-trace.github.io//posts/statistical-correctness},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-gruson2023" class="csl-entry quarto-appendix-citeas">
Gruson, Hugo. 2023. <span>“Ensuring &amp; Showcasing the Statistical
Correctness of Your R Package.”</span> February 13, 2023. <a href="https://epiverse-trace.github.io//posts/statistical-correctness">https://epiverse-trace.github.io//posts/statistical-correctness</a>.
</div></div></section></div> ]]></description>
  <category>code quality</category>
  <category>R</category>
  <category>R package</category>
  <category>testing</category>
  <guid>https://epiverse-trace.github.io/posts/statistical-correctness/index.html</guid>
  <pubDate>Mon, 13 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://epiverse-trace.github.io/posts/statistical-correctness/testing_error.png" medium="image" type="image/png" height="144" width="144"/>
</item>
</channel>
</rss>
