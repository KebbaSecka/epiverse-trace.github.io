<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Epiverse-Trace developer space</title>
<link>https://epiverse-trace.github.io/blog/blog.html</link>
<atom:link href="https://epiverse-trace.github.io/blog/blog.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.2.335</generator>
<lastBuildDate>Mon, 13 Feb 2023 00:00:00 GMT</lastBuildDate>
<item>
  <title>Ensuring &amp; Showcasing the Statistical Correctness of your R Package</title>
  <dc:creator>Hugo Gruson</dc:creator>
  <link>https://epiverse-trace.github.io/blog/posts/statistical-correctness/index.html</link>
  <description><![CDATA[ 




<p>We’re evolving in an increasingly data-driven world. And since critical decisions are taken based on results produced by data scientists and data analysts, they need to be be able to trust the tools they use. It is now increasingly common to add continuous integration to software packages and libraries, to ensure the code is not crashing, and that future updates don’t change your code output (snapshot tests). But one type of test still remains uncommon: tests for statistical correctness. That is, tests that ensure the algorithm implemented in your package actually produce the correct results.</p>
<p></p><div id="tweet-69280"></div><script>tweet={"url":"https:\/\/twitter.com\/AlexCEngler\/status\/1092123648834658305","author_name":"Alex Engler","author_url":"https:\/\/twitter.com\/AlexCEngler","html":"\u003Cblockquote class=\"twitter-tweet\" align=\"center\"\u003E\u003Cp lang=\"en\" dir=\"ltr\"\u003EDoes \u003Ca href=\"https:\/\/twitter.com\/rstudio?ref_src=twsrc%5Etfw\"\u003E@rstudio\u003C\/a\u003E have a position in the trustworthiness \/ validity of any ~statistical methods~ packages in \u003Ca href=\"https:\/\/twitter.com\/hashtag\/Rstats?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#Rstats\u003C\/a\u003E?\u003Cbr\u003E\u003Cbr\u003EOr, is there a list of packages that \u003Ca href=\"https:\/\/twitter.com\/rstudio?ref_src=twsrc%5Etfw\"\u003E@rstudio\u003C\/a\u003E considers &#39;approved&#39; and thus will recommend to clients?\u003C\/p\u003E&mdash; Alex Engler (@AlexCEngler) \u003Ca href=\"https:\/\/twitter.com\/AlexCEngler\/status\/1092123648834658305?ref_src=twsrc%5Etfw\"\u003EFebruary 3, 2019\u003C\/a\u003E\u003C\/blockquote\u003E\n\u003Cscript async src=\"https:\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"\u003E\u003C\/script\u003E\n","width":550,"height":null,"type":"rich","cache_age":"3153600000","provider_name":"Twitter","provider_url":"https:\/\/twitter.com","version":"1.0"};document.getElementById("tweet-69280").innerHTML = tweet["html"];</script><p></p>
<p>It is likely that most statistical package authors run some tests on their own during development but there doesn’t seem to be guidelines on how to test statistical correctness in a solid and standard way <sup>1</sup>.</p>
<p>In this blog post, we explore various methods to ensure the statistical correctness of your software. We argue that these tests should be part of your continuous integration system, to ensure your tools remains valid throughout its life, and to let users verify how you validate your package. Finally, we show how these principles are implemented in the Epiverse TRACE tools.</p>
<p>The approaches presented here are non-exclusive and should ideally all be added to your tests. However, they are presented in order of stringency and priority to implement. We also take a example of a function computing the centroid of a list of points to demonstrate how you would integrate the recommendations from this post with the <a href="https://testthat.r-lib.org/"><code>{testthat}</code> R package</a>, often used from unit testing:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;">#' Compute the centroid of a set of points</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;">#' @param coords Coordinates of the points as a list of vectors. Each element of the </span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;">#'   list is a point.</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;">#' @returns A vector of coordinates of the same length of each element of </span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;">#'   `coords`</span></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;">#'   </span></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;">#' @examples</span></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;">#' centroid(list(c(0, 1, 5, 3), c(8, 6, 4, 3), c(10, 2, 3, 7)))</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;">#' </span></span>
<span id="cb1-12">centroid <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(coords) {</span>
<span id="cb1-13"></span>
<span id="cb1-14">  <span class="co" style="color: #5E5E5E;"># ...</span></span>
<span id="cb1-15">  <span class="co" style="color: #5E5E5E;"># Skip all the necessary input checking for the purpose of this demo</span></span>
<span id="cb1-16">  <span class="co" style="color: #5E5E5E;"># ...</span></span>
<span id="cb1-17"></span>
<span id="cb1-18">  coords_mat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">do.call</span>(rbind, coords)</span>
<span id="cb1-19">  </span>
<span id="cb1-20">  <span class="fu" style="color: #4758AB;">return</span>(<span class="fu" style="color: #4758AB;">colMeans</span>(coords_mat))</span>
<span id="cb1-21">  </span>
<span id="cb1-22">}</span></code></pre></div>
</div>
<section id="compare-your-results-to-the-reference-implementation" class="level1">
<h1>Compare your results to the reference implementation</h1>
<p>The most straightforward and most solid way to ensure your implementation is valid is to compare your results to the results of the reference implementation. The reference implementation can be a package in another language, an example with toy data in the scientific article introducing the method, etc.</p>
<p>For example, the <a href="https://github.com/fboehm/gemma2"><code>{gemma2}</code> R package</a>, which re-implements the methods from <a href="https://github.com/genetics-statistics/GEMMA">the GEMMA tool written in C++</a>, <a href="https://github.com/fboehm/gemma2/blob/ea3052f8609622f17224fb8ec5fd83bd1bceb33e/tests/testthat/test_calc_sigma.R#L34-L37">verifies that values produced by both tools match</a>:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">test_that</span>(<span class="st" style="color: #20794D;">"Results of gemma2 equal those of GEMMA v 0.97"</span>, {</span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;">expect_equal</span>(Sigma_ee, <span class="fu" style="color: #4758AB;">diag</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">18.559</span>, <span class="fl" style="color: #AD0000;">12.3672</span>)), <span class="at" style="color: #657422;">tolerance =</span> <span class="fl" style="color: #AD0000;">0.0001</span>)</span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;">expect_equal</span>(Sigma_uu, <span class="fu" style="color: #4758AB;">diag</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">82.2973</span>, <span class="fl" style="color: #AD0000;">41.9238</span>)), <span class="at" style="color: #657422;">tolerance =</span> <span class="fl" style="color: #AD0000;">0.0001</span>)</span>
<span id="cb2-4">})</span></code></pre></div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Example with <code>centroid()</code>
</div>
</div>
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">library</span>(testthat)</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;">test_that</span>(<span class="st" style="color: #20794D;">"centroid() in 1D produces the same results as mean()"</span>, {</span>
<span id="cb3-4"></span>
<span id="cb3-5">  x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7">  <span class="fu" style="color: #4758AB;">expect_identical</span>(<span class="fu" style="color: #4758AB;">centroid</span>(x), <span class="fu" style="color: #4758AB;">mean</span>(<span class="fu" style="color: #4758AB;">unlist</span>(x)))</span>
<span id="cb3-8">  </span>
<span id="cb3-9">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test passed 🎊</code></pre>
</div>
</div>
</div>
</div>
<p>Note that even if a <strong>reference</strong> implementation doesn’t exist, it is still good practice to compare your implementation to competing ones. Discrepancies might reveal a bug in your implementation or theirs but in any case, finding it out is beneficial to the community.</p>
<p>However, this approach cannot be used in all cases. Indeed, there may not be a reference implementation in your case. Or it might be difficult to replicate identical computations in the case of algorithm with stochasticity <sup>2</sup>.</p>
</section>
<section id="compare-to-a-theoretical-upper-or-lower-bound" class="level1">
<h1>Compare to a theoretical upper or lower bound</h1>
<p>An alternative strategy is to compare your result to theoretical upper or lower bound. This offers a weaker guarantee that your implementation and your results are correct but it can still allow you to detect important mistakes.</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Example with <code>centroid()</code>
</div>
</div>
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">test_that</span>(<span class="st" style="color: #20794D;">"centroid() is inside the hypercube containing the data points"</span>, {</span>
<span id="cb5-2">  </span>
<span id="cb5-3">  x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">3</span>), <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">3</span>), <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">7</span>))</span>
<span id="cb5-4"></span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;">expect_true</span>(<span class="fu" style="color: #4758AB;">all</span>(<span class="fu" style="color: #4758AB;">centroid</span>(x) <span class="sc" style="color: #5E5E5E;">&lt;=</span> <span class="fu" style="color: #4758AB;">Reduce</span>(pmax, x)))</span>
<span id="cb5-6">  <span class="fu" style="color: #4758AB;">expect_true</span>(<span class="fu" style="color: #4758AB;">all</span>(<span class="fu" style="color: #4758AB;">centroid</span>(x) <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="fu" style="color: #4758AB;">Reduce</span>(pmin, x)))</span>
<span id="cb5-7">  </span>
<span id="cb5-8">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test passed 🎉</code></pre>
</div>
</div>
</div>
</div>
<p>You can see a <a href="https://github.com/epiverse-trace/finalsize/blob/a710767b38a9242f15ab4dcf18b02fb5b0bcf24f/tests/testthat/test-newton_solver_vary_r0.R#L1-L13">real-life example of this kind of test in the <code>{finalsize}</code> R package</a>. <code>{finalsize}</code> computes the final proportion of infected in a heterogeneous population according to an SIR model. Theory predicts that the number of infections is maximal in a well-mixed population:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># Calculates the upper limit of final size given the r0</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;"># The upper limit is given by a well mixed population</span></span>
<span id="cb7-3">upper_limit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(r0) {</span>
<span id="cb7-4">  f <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(par) {</span>
<span id="cb7-5">    <span class="fu" style="color: #4758AB;">abs</span>(<span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">-</span> <span class="fu" style="color: #4758AB;">exp</span>(<span class="sc" style="color: #5E5E5E;">-</span>r0 <span class="sc" style="color: #5E5E5E;">*</span> par[<span class="dv" style="color: #AD0000;">1</span>]) <span class="sc" style="color: #5E5E5E;">-</span> par[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb7-6">  }</span>
<span id="cb7-7">  opt <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">optim</span>(</span>
<span id="cb7-8">    <span class="at" style="color: #657422;">par =</span> <span class="fl" style="color: #AD0000;">0.5</span>, <span class="at" style="color: #657422;">fn =</span> f,</span>
<span id="cb7-9">    <span class="at" style="color: #657422;">lower =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">upper =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb7-10">    <span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">"Brent"</span></span>
<span id="cb7-11">  )</span>
<span id="cb7-12">  opt</span>
<span id="cb7-13">}</span></code></pre></div>
</section>
<section id="verify-that-output-is-changing-as-expected-when-a-single-parameter-varies" class="level1">
<h1>Verify that output is changing as expected when a single parameter varies</h1>
<p>An even looser way to test statistical correctness would be to control that output varies as expected when you update some parameters. This could be for example, checking that the values you return increase when you increase or decrease one of your input parameters.</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Example with <code>centroid()</code>
</div>
</div>
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">test_that</span>(<span class="st" style="color: #20794D;">"centroid() increases when coordinates from one point increase"</span>, {</span>
<span id="cb8-2">  </span>
<span id="cb8-3">  x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">3</span>), <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">3</span>), <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">7</span>))</span>
<span id="cb8-4">  </span>
<span id="cb8-5">  y <span class="ot" style="color: #003B4F;">&lt;-</span> x</span>
<span id="cb8-6">  y[[<span class="dv" style="color: #AD0000;">1</span>]] <span class="ot" style="color: #003B4F;">&lt;-</span> y[[<span class="dv" style="color: #AD0000;">1</span>]] <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span> </span>
<span id="cb8-7"></span>
<span id="cb8-8">  <span class="fu" style="color: #4758AB;">expect_true</span>(<span class="fu" style="color: #4758AB;">all</span>(<span class="fu" style="color: #4758AB;">centroid</span>(x) <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="fu" style="color: #4758AB;">centroid</span>(y)))</span>
<span id="cb8-9">  </span>
<span id="cb8-10">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test passed 🌈</code></pre>
</div>
</div>
</div>
</div>
<p>An example of this test in an actual R package can again be found <a href="https://github.com/epiverse-trace/finalsize/blob/787de9a8fa430d63d06d2bc052c7134c43d1ca69/tests/testthat/test-newton_solver.R#L76-L102">in the finalsize package</a>:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">r0_low <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fl" style="color: #AD0000;">1.3</span></span>
<span id="cb10-2">r0_high <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fl" style="color: #AD0000;">3.3</span></span>
<span id="cb10-3"></span>
<span id="cb10-4">epi_outcome_low <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">final_size</span>(</span>
<span id="cb10-5">  <span class="at" style="color: #657422;">r0 =</span> r0_low,</span>
<span id="cb10-6">  <span class="sc" style="color: #5E5E5E;">&lt;</span>...<span class="sc" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb10-7">)</span>
<span id="cb10-8">epi_outcome_high <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">final_size</span>(</span>
<span id="cb10-9">  <span class="at" style="color: #657422;">r0 =</span> r0_high,</span>
<span id="cb10-10">  <span class="sc" style="color: #5E5E5E;">&lt;</span>...<span class="sc" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb10-11">)</span>
<span id="cb10-12"></span>
<span id="cb10-13"><span class="fu" style="color: #4758AB;">test_that</span>(<span class="st" style="color: #20794D;">"Higher values of R0 result in a higher number of infectious in all groups"</span>, {</span>
<span id="cb10-14">  <span class="fu" style="color: #4758AB;">expect_true</span>(</span>
<span id="cb10-15">    <span class="fu" style="color: #4758AB;">all</span>(epi_outcome_high<span class="sc" style="color: #5E5E5E;">$</span>p_infected <span class="sc" style="color: #5E5E5E;">&gt;</span> epi_outcome_low<span class="sc" style="color: #5E5E5E;">$</span>p_infected)</span>
<span id="cb10-16">  )</span>
<span id="cb10-17">})</span></code></pre></div>
</section>
<section id="conclusion-automated-validation-vs-peer-review" class="level1">
<h1>Conclusion: automated validation vs peer-review</h1>
<p>In this post, we’ve presented different methods to automatically verify the statistical correctness of your statistical software. We would like to highlight one more time that it’s important to run these tests are part of your regular integration system, instead of running them just once at the start of the development. This will prevent the addition of possible errors in the code and show users what specific checks you are doing. By doing so, you are transparently committing to the highest quality.</p>
<p><a href="https://notstatschat.rbind.io/2019/02/04/how-do-you-tell-what-packages-to-trust/">Multiple voices</a> <a href="https://twitter.com/hadleywickham/status/1092129977540231168">in the community</a> are pushing more towards peer-review as a proxy for quality and validity:</p>
<p></p><div id="tweet-75507"></div><script>tweet={"url":"https:\/\/twitter.com\/hadleywickham\/status\/1092129977540231168","author_name":"Hadley Wickham","author_url":"https:\/\/twitter.com\/hadleywickham","html":"\u003Cblockquote class=\"twitter-tweet\" align=\"center\"\u003E\u003Cp lang=\"en\" dir=\"ltr\"\u003EI don’t think we’d ever validate statistical methods. I’d look for other proxies like peer reviewed publications about the package. I generally prefer to trust _people_ rather than packages.\u003C\/p\u003E&mdash; Hadley Wickham (@hadleywickham) \u003Ca href=\"https:\/\/twitter.com\/hadleywickham\/status\/1092129977540231168?ref_src=twsrc%5Etfw\"\u003EFebruary 3, 2019\u003C\/a\u003E\u003C\/blockquote\u003E\n\u003Cscript async src=\"https:\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"\u003E\u003C\/script\u003E\n","width":550,"height":null,"type":"rich","cache_age":"3153600000","provider_name":"Twitter","provider_url":"https:\/\/twitter.com","version":"1.0"};document.getElementById("tweet-75507").innerHTML = tweet["html"];</script><p></p>
<p>We would like to highlight that automated validation and peer review are not mutually exclusive and answer slightly different purposes.</p>
<p>On the one hand, automated validation fails to catch more obscure bugs and edge cases. For example, a bug that would be difficult to detect via automated approach is the use of <a href="https://www.jottr.org/2020/09/22/push-for-statistical-sound-rng/">bad Random Number Generators when running in parallel</a>.</p>
<p>But on the other hand, peer-review is less scalable, and journals usually have some editorial policy that might not make your package a good fit. Additionally, peer-review usually happens at one point in time while automated validation can, and should, be part of the continuous integration system.</p>
<p>Ideally, peer-review and automated validation should work hand-in-hand, with review informing the addition of new automated valiation tests.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>But see the <a href="https://www.alexpghayes.com/post/2019-06-07_testing-statistical-software/">“testing statistical software” post from Alex Hayes</a> where he presents his process to determine if he deems a statistical package trustworthy or not, and <a href="https://stats-devguide.ropensci.org/">rOpenSci Statistical Software Peer Review book</a>.↩︎</p></li>
<li id="fn2"><p>Setting the random seed is not enough to compare implementations across programming languages because different languages use different kind of Random Number Generators.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>code quality</category>
  <category>R package</category>
  <category>testing</category>
  <guid>https://epiverse-trace.github.io/blog/posts/statistical-correctness/index.html</guid>
  <pubDate>Mon, 13 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://epiverse-trace.github.io/blog/posts/statistical-correctness/testing_error.png" medium="image" type="image/png" height="144" width="144"/>
</item>
</channel>
</rss>
