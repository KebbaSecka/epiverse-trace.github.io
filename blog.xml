<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Epiverse-TRACE developer space</title>
<link>https://epiverse-trace.github.io/blog.html</link>
<atom:link href="https://epiverse-trace.github.io/blog.xml" rel="self" type="application/rss+xml"/>
<description>A place for Epiverse-TRACE developers to share their reflections, learnings, and showcase their work.</description>
<generator>quarto-1.2.335</generator>
<lastBuildDate>Mon, 13 Feb 2023 00:00:00 GMT</lastBuildDate>
<item>
  <title>Ensuring &amp; Showcasing the Statistical Correctness of your R Package</title>
  <dc:creator>Hugo Gruson</dc:creator>
  <link>https://epiverse-trace.github.io/posts/statistical-correctness/index.html</link>
  <description><![CDATA[ 




<p>We’re evolving in an increasingly data-driven world. And since critical decisions are taken based on results produced by data scientists and data analysts, they need to be be able to trust the tools they use. It is now increasingly common to add continuous integration to software packages and libraries, to ensure the code is not crashing, and that future updates don’t change your code output (snapshot tests). But one type of test still remains uncommon: tests for statistical correctness. That is, tests that ensure the algorithm implemented in your package actually produce the correct results.</p>
<p></p><div id="tweet-15909"></div><script>tweet={"url":"https:\/\/twitter.com\/AlexCEngler\/status\/1092123648834658305","author_name":"Alex Engler","author_url":"https:\/\/twitter.com\/AlexCEngler","html":"\u003Cblockquote class=\"twitter-tweet\" align=\"center\"\u003E\u003Cp lang=\"en\" dir=\"ltr\"\u003EDoes \u003Ca href=\"https:\/\/twitter.com\/rstudio?ref_src=twsrc%5Etfw\"\u003E@rstudio\u003C\/a\u003E have a position in the trustworthiness \/ validity of any ~statistical methods~ packages in \u003Ca href=\"https:\/\/twitter.com\/hashtag\/Rstats?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#Rstats\u003C\/a\u003E?\u003Cbr\u003E\u003Cbr\u003EOr, is there a list of packages that \u003Ca href=\"https:\/\/twitter.com\/rstudio?ref_src=twsrc%5Etfw\"\u003E@rstudio\u003C\/a\u003E considers &#39;approved&#39; and thus will recommend to clients?\u003C\/p\u003E&mdash; Alex Engler (@AlexCEngler) \u003Ca href=\"https:\/\/twitter.com\/AlexCEngler\/status\/1092123648834658305?ref_src=twsrc%5Etfw\"\u003EFebruary 3, 2019\u003C\/a\u003E\u003C\/blockquote\u003E\n\u003Cscript async src=\"https:\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"\u003E\u003C\/script\u003E\n","width":550,"height":null,"type":"rich","cache_age":"3153600000","provider_name":"Twitter","provider_url":"https:\/\/twitter.com","version":"1.0"};document.getElementById("tweet-15909").innerHTML = tweet["html"];</script><p></p>
<p>It is likely that most statistical package authors run some tests on their own during development but there doesn’t seem to be guidelines on how to test statistical correctness in a solid and standard way <sup>1</sup>.</p>
<p>In this blog post, we explore various methods to ensure the statistical correctness of your software. We argue that these tests should be part of your continuous integration system, to ensure your tools remains valid throughout its life, and to let users verify how you validate your package. Finally, we show how these principles are implemented in the Epiverse TRACE tools.</p>
<p>The approaches presented here are non-exclusive and should ideally all be added to your tests. However, they are presented in order of stringency and priority to implement. We also take a example of a function computing the centroid of a list of points to demonstrate how you would integrate the recommendations from this post with the <a href="https://testthat.r-lib.org/"><code>{testthat}</code> R package</a>, often used from unit testing:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;">#' Compute the centroid of a set of points</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;">#' @param coords Coordinates of the points as a list of vectors. Each element of the </span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;">#'   list is a point.</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;">#'</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;">#' @returns A vector of coordinates of the same length of each element of </span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;">#'   `coords`</span></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;">#'   </span></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;">#' @examples</span></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;">#' centroid(list(c(0, 1, 5, 3), c(8, 6, 4, 3), c(10, 2, 3, 7)))</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;">#' </span></span>
<span id="cb1-12">centroid <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(coords) {</span>
<span id="cb1-13"></span>
<span id="cb1-14">  <span class="co" style="color: #5E5E5E;"># ...</span></span>
<span id="cb1-15">  <span class="co" style="color: #5E5E5E;"># Skip all the necessary input checking for the purpose of this demo</span></span>
<span id="cb1-16">  <span class="co" style="color: #5E5E5E;"># ...</span></span>
<span id="cb1-17"></span>
<span id="cb1-18">  coords_mat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">do.call</span>(rbind, coords)</span>
<span id="cb1-19">  </span>
<span id="cb1-20">  <span class="fu" style="color: #4758AB;">return</span>(<span class="fu" style="color: #4758AB;">colMeans</span>(coords_mat))</span>
<span id="cb1-21">  </span>
<span id="cb1-22">}</span></code></pre></div>
</div>
<section id="compare-your-results-to-the-reference-implementation" class="level1">
<h1>Compare your results to the reference implementation</h1>
<p>The most straightforward and most solid way to ensure your implementation is valid is to compare your results to the results of the reference implementation. The reference implementation can be a package in another language, an example with toy data in the scientific article introducing the method, etc.</p>
<p>For example, the <a href="https://github.com/fboehm/gemma2"><code>{gemma2}</code> R package</a>, which re-implements the methods from <a href="https://github.com/genetics-statistics/GEMMA">the GEMMA tool written in C++</a>, <a href="https://github.com/fboehm/gemma2/blob/ea3052f8609622f17224fb8ec5fd83bd1bceb33e/tests/testthat/test_calc_sigma.R#L34-L37">verifies that values produced by both tools match</a>:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">test_that</span>(<span class="st" style="color: #20794D;">"Results of gemma2 equal those of GEMMA v 0.97"</span>, {</span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;">expect_equal</span>(Sigma_ee, <span class="fu" style="color: #4758AB;">diag</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">18.559</span>, <span class="fl" style="color: #AD0000;">12.3672</span>)), <span class="at" style="color: #657422;">tolerance =</span> <span class="fl" style="color: #AD0000;">0.0001</span>)</span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;">expect_equal</span>(Sigma_uu, <span class="fu" style="color: #4758AB;">diag</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">82.2973</span>, <span class="fl" style="color: #AD0000;">41.9238</span>)), <span class="at" style="color: #657422;">tolerance =</span> <span class="fl" style="color: #AD0000;">0.0001</span>)</span>
<span id="cb2-4">})</span></code></pre></div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Example with <code>centroid()</code>
</div>
</div>
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">library</span>(testthat)</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;">test_that</span>(<span class="st" style="color: #20794D;">"centroid() in 1D produces the same results as mean()"</span>, {</span>
<span id="cb3-4"></span>
<span id="cb3-5">  x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7">  <span class="fu" style="color: #4758AB;">expect_identical</span>(<span class="fu" style="color: #4758AB;">centroid</span>(x), <span class="fu" style="color: #4758AB;">mean</span>(<span class="fu" style="color: #4758AB;">unlist</span>(x)))</span>
<span id="cb3-8">  </span>
<span id="cb3-9">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test passed 🎊</code></pre>
</div>
</div>
</div>
</div>
<p>Note that even if a <strong>reference</strong> implementation doesn’t exist, it is still good practice to compare your implementation to competing ones. Discrepancies might reveal a bug in your implementation or theirs but in any case, finding it out is beneficial to the community.</p>
<p>However, this approach cannot be used in all cases. Indeed, there may not be a reference implementation in your case. Or it might be difficult to replicate identical computations in the case of algorithm with stochasticity <sup>2</sup>.</p>
</section>
<section id="compare-to-a-theoretical-upper-or-lower-bound" class="level1">
<h1>Compare to a theoretical upper or lower bound</h1>
<p>An alternative strategy is to compare your result to theoretical upper or lower bound. This offers a weaker guarantee that your implementation and your results are correct but it can still allow you to detect important mistakes.</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Example with <code>centroid()</code>
</div>
</div>
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">test_that</span>(<span class="st" style="color: #20794D;">"centroid() is inside the hypercube containing the data points"</span>, {</span>
<span id="cb5-2">  </span>
<span id="cb5-3">  x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">3</span>), <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">3</span>), <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">7</span>))</span>
<span id="cb5-4"></span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;">expect_true</span>(<span class="fu" style="color: #4758AB;">all</span>(<span class="fu" style="color: #4758AB;">centroid</span>(x) <span class="sc" style="color: #5E5E5E;">&lt;=</span> <span class="fu" style="color: #4758AB;">Reduce</span>(pmax, x)))</span>
<span id="cb5-6">  <span class="fu" style="color: #4758AB;">expect_true</span>(<span class="fu" style="color: #4758AB;">all</span>(<span class="fu" style="color: #4758AB;">centroid</span>(x) <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="fu" style="color: #4758AB;">Reduce</span>(pmin, x)))</span>
<span id="cb5-7">  </span>
<span id="cb5-8">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test passed 🎉</code></pre>
</div>
</div>
</div>
</div>
<p>You can see a <a href="https://github.com/epiverse-trace/finalsize/blob/a710767b38a9242f15ab4dcf18b02fb5b0bcf24f/tests/testthat/test-newton_solver_vary_r0.R#L1-L13">real-life example of this kind of test in the <code>{finalsize}</code> R package</a>. <code>{finalsize}</code> computes the final proportion of infected in a heterogeneous population according to an SIR model. Theory predicts that the number of infections is maximal in a well-mixed population:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># Calculates the upper limit of final size given the r0</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;"># The upper limit is given by a well mixed population</span></span>
<span id="cb7-3">upper_limit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(r0) {</span>
<span id="cb7-4">  f <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(par) {</span>
<span id="cb7-5">    <span class="fu" style="color: #4758AB;">abs</span>(<span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">-</span> <span class="fu" style="color: #4758AB;">exp</span>(<span class="sc" style="color: #5E5E5E;">-</span>r0 <span class="sc" style="color: #5E5E5E;">*</span> par[<span class="dv" style="color: #AD0000;">1</span>]) <span class="sc" style="color: #5E5E5E;">-</span> par[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb7-6">  }</span>
<span id="cb7-7">  opt <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">optim</span>(</span>
<span id="cb7-8">    <span class="at" style="color: #657422;">par =</span> <span class="fl" style="color: #AD0000;">0.5</span>, <span class="at" style="color: #657422;">fn =</span> f,</span>
<span id="cb7-9">    <span class="at" style="color: #657422;">lower =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">upper =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb7-10">    <span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">"Brent"</span></span>
<span id="cb7-11">  )</span>
<span id="cb7-12">  opt</span>
<span id="cb7-13">}</span></code></pre></div>
</section>
<section id="verify-that-output-is-changing-as-expected-when-a-single-parameter-varies" class="level1">
<h1>Verify that output is changing as expected when a single parameter varies</h1>
<p>An even looser way to test statistical correctness would be to control that output varies as expected when you update some parameters. This could be for example, checking that the values you return increase when you increase or decrease one of your input parameters.</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Example with <code>centroid()</code>
</div>
</div>
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">test_that</span>(<span class="st" style="color: #20794D;">"centroid() increases when coordinates from one point increase"</span>, {</span>
<span id="cb8-2">  </span>
<span id="cb8-3">  x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">3</span>), <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">3</span>), <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">7</span>))</span>
<span id="cb8-4">  </span>
<span id="cb8-5">  y <span class="ot" style="color: #003B4F;">&lt;-</span> x</span>
<span id="cb8-6">  y[[<span class="dv" style="color: #AD0000;">1</span>]] <span class="ot" style="color: #003B4F;">&lt;-</span> y[[<span class="dv" style="color: #AD0000;">1</span>]] <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span> </span>
<span id="cb8-7"></span>
<span id="cb8-8">  <span class="fu" style="color: #4758AB;">expect_true</span>(<span class="fu" style="color: #4758AB;">all</span>(<span class="fu" style="color: #4758AB;">centroid</span>(x) <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="fu" style="color: #4758AB;">centroid</span>(y)))</span>
<span id="cb8-9">  </span>
<span id="cb8-10">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test passed 🌈</code></pre>
</div>
</div>
</div>
</div>
<p>An example of this test in an actual R package can again be found <a href="https://github.com/epiverse-trace/finalsize/blob/787de9a8fa430d63d06d2bc052c7134c43d1ca69/tests/testthat/test-newton_solver.R#L76-L102">in the finalsize package</a>:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">r0_low <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fl" style="color: #AD0000;">1.3</span></span>
<span id="cb10-2">r0_high <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fl" style="color: #AD0000;">3.3</span></span>
<span id="cb10-3"></span>
<span id="cb10-4">epi_outcome_low <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">final_size</span>(</span>
<span id="cb10-5">  <span class="at" style="color: #657422;">r0 =</span> r0_low,</span>
<span id="cb10-6">  <span class="sc" style="color: #5E5E5E;">&lt;</span>...<span class="sc" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb10-7">)</span>
<span id="cb10-8">epi_outcome_high <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">final_size</span>(</span>
<span id="cb10-9">  <span class="at" style="color: #657422;">r0 =</span> r0_high,</span>
<span id="cb10-10">  <span class="sc" style="color: #5E5E5E;">&lt;</span>...<span class="sc" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb10-11">)</span>
<span id="cb10-12"></span>
<span id="cb10-13"><span class="fu" style="color: #4758AB;">test_that</span>(<span class="st" style="color: #20794D;">"Higher values of R0 result in a higher number of infectious in all groups"</span>, {</span>
<span id="cb10-14">  <span class="fu" style="color: #4758AB;">expect_true</span>(</span>
<span id="cb10-15">    <span class="fu" style="color: #4758AB;">all</span>(epi_outcome_high<span class="sc" style="color: #5E5E5E;">$</span>p_infected <span class="sc" style="color: #5E5E5E;">&gt;</span> epi_outcome_low<span class="sc" style="color: #5E5E5E;">$</span>p_infected)</span>
<span id="cb10-16">  )</span>
<span id="cb10-17">})</span></code></pre></div>
</section>
<section id="conclusion-automated-validation-vs-peer-review" class="level1">
<h1>Conclusion: automated validation vs peer-review</h1>
<p>In this post, we’ve presented different methods to automatically verify the statistical correctness of your statistical software. We would like to highlight one more time that it’s important to run these tests are part of your regular integration system, instead of running them just once at the start of the development. This will prevent the addition of possible errors in the code and show users what specific checks you are doing. By doing so, you are transparently committing to the highest quality.</p>
<p><a href="https://notstatschat.rbind.io/2019/02/04/how-do-you-tell-what-packages-to-trust/">Multiple voices</a> <a href="https://twitter.com/hadleywickham/status/1092129977540231168">in the community</a> are pushing more towards peer-review as a proxy for quality and validity:</p>
<p></p><div id="tweet-86425"></div><script>tweet={"url":"https:\/\/twitter.com\/hadleywickham\/status\/1092129977540231168","author_name":"Hadley Wickham","author_url":"https:\/\/twitter.com\/hadleywickham","html":"\u003Cblockquote class=\"twitter-tweet\" align=\"center\"\u003E\u003Cp lang=\"en\" dir=\"ltr\"\u003EI don’t think we’d ever validate statistical methods. I’d look for other proxies like peer reviewed publications about the package. I generally prefer to trust _people_ rather than packages.\u003C\/p\u003E&mdash; Hadley Wickham (@hadleywickham) \u003Ca href=\"https:\/\/twitter.com\/hadleywickham\/status\/1092129977540231168?ref_src=twsrc%5Etfw\"\u003EFebruary 3, 2019\u003C\/a\u003E\u003C\/blockquote\u003E\n\u003Cscript async src=\"https:\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"\u003E\u003C\/script\u003E\n","width":550,"height":null,"type":"rich","cache_age":"3153600000","provider_name":"Twitter","provider_url":"https:\/\/twitter.com","version":"1.0"};document.getElementById("tweet-86425").innerHTML = tweet["html"];</script><p></p>
<p>We would like to highlight that automated validation and peer review are not mutually exclusive and answer slightly different purposes.</p>
<p>On the one hand, automated validation fails to catch more obscure bugs and edge cases. For example, a bug that would be difficult to detect via automated approach is the use of <a href="https://www.jottr.org/2020/09/22/push-for-statistical-sound-rng/">bad Random Number Generators when running in parallel</a>.</p>
<p>But on the other hand, peer-review is less scalable, and journals usually have some editorial policy that might not make your package a good fit. Additionally, peer-review usually happens at one point in time while automated validation can, and should, be part of the continuous integration system.</p>
<p>Ideally, peer-review and automated validation should work hand-in-hand, with review informing the addition of new automated valiation tests.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>But see the <a href="https://www.alexpghayes.com/post/2019-06-07_testing-statistical-software/">“testing statistical software” post from Alex Hayes</a> where he presents his process to determine if he deems a statistical package trustworthy or not, and <a href="https://stats-devguide.ropensci.org/">rOpenSci Statistical Software Peer Review book</a>.↩︎</p></li>
<li id="fn2"><p>Setting the random seed is not enough to compare implementations across programming languages because different languages use different kind of Random Number Generators.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>code quality</category>
  <category>R package</category>
  <category>testing</category>
  <guid>https://epiverse-trace.github.io/posts/statistical-correctness/index.html</guid>
  <pubDate>Mon, 13 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://epiverse-trace.github.io/posts/statistical-correctness/testing_error.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Improving the C++ Code Quality of an Rcpp Package</title>
  <dc:creator>Pratik R Gupte</dc:creator>
  <link>https://epiverse-trace.github.io/posts/lint-rcpp/index.html</link>
  <description><![CDATA[ 




<section id="use-case" class="level2">
<h2 class="anchored" data-anchor-id="use-case">Use case</h2>
<p>The R package development ecosystem includes packages such as <a href="https://lintr.r-lib.org/">{lintr}</a> and <a href="https://styler.r-lib.org">{styler}</a> that can help to check code style, and to format R code.</p>
<p>However, these packages cannot lint or style the C++ code of <a href="https://www.rcpp.org/">{Rcpp}</a> packages. This could leave the C++ code of an Rcpp package less clean than the R code, increasing the technical debt already associated with using two languages.</p>
<p>In Epiverse-TRACE, we encounter this issue with <a href="https://epiverse-trace.github.io/finalsize/">{finalsize}</a>, and we anticipate the same issue with further epidemic modelling packages that we seek to develop or adapt, such as <a href="https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1005838">{fluEvidenceSynthesis}</a>.</p>
<p>Our use-case is not unique, of course, and other projects could have their own solutions. One such, from which we have borrowed some ideas, is the <a href="https://arrow.apache.org/">Apache Arrow project</a>, whose R package also uses a C++ backend (via <a href="https://cpp11.r-lib.org/">{cpp11}</a> rather than {Rcpp}).</p>
</section>
<section id="choice-of-c-linters" class="level2">
<h2 class="anchored" data-anchor-id="choice-of-c-linters">Choice of C++ linters</h2>
<p>C++ linters such as <a href="https://clang.llvm.org/extra/clang-tidy/"><em>clang-tidy</em></a> stumble when dealing with C++ code in <code>src/</code>, as the <em>clang</em> toolchain attempts to compile it. This does not work for Rcpp packages, as the <code>Rcpp.h</code> header cannot be found — this linking is handled by {Rcpp}.</p>
<p>Fortunately, other C++ linters and code checking tools are available and can be used safely with Rcpp packages.</p>
<p>We have chosen to use <em>cpplint</em> and <em>cppcheck</em> for {finalsize}.</p>
<section id="cpplint" class="level3">
<h3 class="anchored" data-anchor-id="cpplint">Cpplint</h3>
<p><a href="https://github.com/cpplint/cpplint"><em>cpplint</em></a> is a tool that checks whether C/C++ files follow <a href="http://google.github.io/styleguide/cppguide.html">Google’s C++ style guide</a>. <em>cpplint</em> is easy to install across platforms, and does not error when it cannot find <code>Rcpp.h</code>.</p>
<p>Importantly, <em>cpplint</em> can be instructed to not lint the autogenerated <code>RcppExports.cpp</code> file, which follows a different style.</p>
<p>To lint all other <code>.cpp</code> files, we simply run <code>cpplint</code> from the terminal.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;">cpplint</span> <span class="at" style="color: #657422;">--exclude</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"src/RcppExports.cpp"</span> src/<span class="pp" style="color: #AD0000;">*</span>.cpp</span></code></pre></div>
</section>
<section id="cppcheck" class="level3">
<h3 class="anchored" data-anchor-id="cppcheck">Cppcheck</h3>
<p><a href="https://cppcheck.sourceforge.io/"><em>cppcheck</em></a> is a static code analysis tool, that aims to “have very few false positives”. This is especially useful for the non-standard organisation of Rcpp projects compared to C++ projects.</p>
<p><em>cppcheck</em> can also be run locally and instructed to ignore the autogenerated <code>RcppExports.cpp</code> file, while throwing up issues with style.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;">cppcheck</span> <span class="at" style="color: #657422;">-i</span> src/RcppExports.cpp <span class="at" style="color: #657422;">--enable</span><span class="op" style="color: #5E5E5E;">=</span>style <span class="at" style="color: #657422;">--error-exitcode</span><span class="op" style="color: #5E5E5E;">=</span>1 src</span></code></pre></div>
<p>Here, the <code>--enable=style</code> option lets <em>cppcheck</em> flag issues with style, acting as a second linter. This enables the <code>performance</code> and <code>portability</code> flags as well. (We have not found any difference when using <code>--enable=warning</code> instead.)</p>
<p>Enabling all checks (<code>--enable=all</code>) would flag two specific issues for {Rcpp} packages: (1) the <code>Rcpp*.h</code> headers not being found (of the class <code>missingIncludeSystem</code>), and (2) the solver functions not being used by any other C++ function (<code>unusedFunction</code>).</p>
<p>These extra options should be avoided in {Rcpp} packages, as the linking is handled for us, and the functions are indeed used later — just not by other C++ functions.</p>
<p>The <code>--error-exitcode=1</code> argument returns the integer <code>1</code> when an error is found, which is by convention the output for an error.</p>
</section>
</section>
<section id="adding-c-linting-to-ci-workflows" class="level2">
<h2 class="anchored" data-anchor-id="adding-c-linting-to-ci-workflows">Adding C++ linting to CI workflows</h2>
<p>Both <em>cpplint</em> and <em>cppcheck</em> can be easily added to continuous integration workflows. In Epiverse-TRACE, we use Github Actions. The C++ lint workflow we have implemented looks like this:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb3-1"><span class="fu" style="color: #4758AB;">on</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb3-2"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">push</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb3-3"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">paths</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"src/**"</span></span>
<span id="cb3-4"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">pull_request</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb3-5"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">branches</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb3-6"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"*"</span></span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Cpp-lint-check</span></span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="fu" style="color: #4758AB;">jobs</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb3-11"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">cpplint</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb3-12"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">runs-on</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ubuntu-latest</span></span>
<span id="cb3-13"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">steps</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb3-14"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">uses</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> actions/checkout@v3</span></span>
<span id="cb3-15"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">uses</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> actions/setup-python@v2</span></span>
<span id="cb3-16"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">run</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> pip install cpplint</span></span>
<span id="cb3-17"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">run</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> cpplint --quiet --exclude="src/RcppExports.cpp" src/*.cpp</span></span>
<span id="cb3-18"></span>
<span id="cb3-19"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">cppcheck</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb3-20"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">runs-on</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ubuntu-latest</span></span>
<span id="cb3-21"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">steps</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb3-22"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">uses</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> actions/checkout@v3</span></span>
<span id="cb3-23"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">run</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> sudo apt-get install cppcheck</span></span>
<span id="cb3-24"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">run</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> cppcheck -i src/RcppExports.cpp --quiet --enable=warning --error-exitcode=1 .</span></span></code></pre></div>
<p>The workflow is triggered when there are changes to files in <code>src/</code>, and on all pull requests.</p>
</section>
<section id="formatting-c-code" class="level2">
<h2 class="anchored" data-anchor-id="formatting-c-code">Formatting C++ code</h2>
<p>C++ code can be automatically formatted to avoid linter errors. An especially useful tool is <a href="https://clang.llvm.org/docs/ClangFormat.html"><em>clang-format</em></a>. Our code is styled to follow the <a href="https://google.github.io/styleguide/cppguide.html">Google C++ style guide</a> using:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># replace .cpp with .h to format headers</span></span>
<span id="cb4-2"><span class="ex" style="color: null;">clang-format</span> <span class="at" style="color: #657422;">-i</span> <span class="at" style="color: #657422;">-style</span><span class="op" style="color: #5E5E5E;">=</span>google src/<span class="pp" style="color: #AD0000;">*</span>.cpp</span></code></pre></div>
<p>However, this also formats the autogenerated <code>RcppExports.cpp</code> file. It can be extra work to repeatedly undo this change and keep the original formatting, but <em>clang-format</em> does not provide an easy inline way to ignore this file.</p>
<p>Instead, <em>clang-format</em> can be passed all files except <code>RcppExports.cpp</code> to style using some simple shell commands. In smaller projects, it might be worth</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="fu" style="color: #4758AB;">find</span> src <span class="at" style="color: #657422;">-name</span> <span class="st" style="color: #20794D;">"*.cpp"</span> ! <span class="at" style="color: #657422;">-name</span> <span class="st" style="color: #20794D;">"RcppExports.cpp"</span> <span class="at" style="color: #657422;">-exec</span> clang-format <span class="at" style="color: #657422;">-style</span><span class="op" style="color: #5E5E5E;">=</span>google <span class="at" style="color: #657422;">-i</span> {} <span class="dt" style="color: #AD0000;">\;</span></span></code></pre></div>
</section>
<section id="turning-off-linting-and-formatting" class="level2">
<h2 class="anchored" data-anchor-id="turning-off-linting-and-formatting">Turning off linting and formatting</h2>
<p>There are cases in which we might want to turn linting and formatting off. This might be when the linter does not agree with valid C++ code required in the project, or when the linters and stylers do not agree with each other. These tools are developed separately by large software projects with their own internal requirements, and solutions to issues encountered in their work: <em>clang-format</em> by LLVM (although specifying <code>-style=google</code>), and <em>cpplint</em> from Google’s work.</p>
<section id="linter-enforced-paradigms" class="level3">
<h3 class="anchored" data-anchor-id="linter-enforced-paradigms">Linter-enforced paradigms</h3>
<p>Sometimes, the linter or styler developer enforces both a style <em>and</em> the use of certain programming paradigms. An example from <em>cpplint</em> is when it warns against passing function arguments by reference, and prefers for these to be passed as pointers, or as constant references (<code>const int &amp;value</code>).</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb6-1"><span class="dt" style="color: #AD0000;">int</span> some_function<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> <span class="op" style="color: #5E5E5E;">&amp;</span>value<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span> </span>
<span id="cb6-2">  <span class="co" style="color: #5E5E5E;">/* operations modifying value */</span></span>
<span id="cb6-3">  <span class="cf" style="color: #003B4F;">return</span> value<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-4"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>Passing the argument as a <code>const</code> reference would not serve the needs of this function, and passing by value is a valid strategy when we don’t want to get into the details of using pointers. (Note that this is typically an issue when large objects such as custom classes or structs are passed to a function multiple times.)</p>
<p>Similarly, <em>cpplint</em> will throw a warning about accessing variables using <code>std::move</code>, which is something we encounter in the Newton solver in {finalsize}. While not technically wrong for such a simple use case, the linter is correct to cautiously throw a warning nonetheless.</p>
</section>
<section id="linter-styler-disagreement" class="level3">
<h3 class="anchored" data-anchor-id="linter-styler-disagreement">Linter-styler disagreement</h3>
<p>One example of linter-styler disagreement is the use of <code>BOOST_FOREACH</code> from the <a href="https://www.boost.org/">Boost libraries</a> as an alternative to <code>for</code> loops. <em>clang-format</em> will insist on adding two spaces before the opening bracket: <code>BOOST_FOREACH  ()</code>. <em>cpplint</em> will insist on removing one space.</p>
<p><em>cpplint</em> and <em>clang-format</em> also disagree on the order of header inclusions, especially when both local and system headers are included.</p>
</section>
<section id="disabling-checks-on-code-chunks" class="level3">
<h3 class="anchored" data-anchor-id="disabling-checks-on-code-chunks">Disabling checks on code chunks</h3>
<p>Either of these cases could require disabling linting or formatting on some part of the code. It is possible to turn off linting using <em>cpplint</em> at particular lines using the comment <code>// NOLINT</code>. Multiple lines can be protected from linting as well.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb7-1"><span class="co" style="color: #5E5E5E;">// NOLINTBEGIN</span></span>
<span id="cb7-2"><span class="op" style="color: #5E5E5E;">&lt;</span>some C<span class="op" style="color: #5E5E5E;">++</span> code here<span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;">// NOLINTEND</span></span></code></pre></div>
<p>Alternatively, <em>clang-format</em> can be instructed to ignore chunks of code using comment messages too.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb8-1"><span class="co" style="color: #5E5E5E;">// clang-format off</span></span>
<span id="cb8-2"><span class="op" style="color: #5E5E5E;">&lt;</span>some C<span class="op" style="color: #5E5E5E;">++</span> code here<span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;">// clang-format on</span></span></code></pre></div>
</section>
</section>
<section id="linter-options-for-future-packages" class="level2">
<h2 class="anchored" data-anchor-id="linter-options-for-future-packages">Linter options for future packages</h2>
<p>{finalsize} is a relatively simple {Rcpp} package, with no C/C++ headers, and no C++ tests. However, future Epiverse-TRACE packages could be more similar to {fluEvidenceSynthesis}, and will have header files, and could also have <a href="https://github.com/catchorg/Catch2">C++ unit tests via the <em>catch</em> framework</a>.</p>
<p><em>cpplint</em> will demand that all local headers be prefixed with their directory (<code>src/</code>), but this would cause the code to break as {Rcpp} looks for a subdirectory called <code>src/src/</code>. This can be turned off by passing the filter option <code>--filter="-build/include_subdir"</code> to <em>cpplint</em>. Alternatively, we could place headers in a subdirectory such as <code>inst/include</code>.</p>
<p>Both <em>cpplint</em> and <em>cppcheck</em> can be instructed to ignore C++ test files using the <em>catch</em> testing framework provided by {testthat}. This prevents errors due to the specialised syntax provided by {testthat} in <code>testthat.h</code>, such as <code>context</code>.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># for cpplint, add an extra exclude statement</span></span>
<span id="cb9-2"><span class="ex" style="color: null;">cpplint</span> <span class="op" style="color: #5E5E5E;">&lt;</span>...<span class="op" style="color: #5E5E5E;">&gt;</span> --exclude=<span class="st" style="color: #20794D;">"src/test*.cpp"</span> src/<span class="pp" style="color: #AD0000;">*</span>.cpp</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;"># for cppcheck, suppress checks on test files</span></span>
<span id="cb9-5"><span class="ex" style="color: null;">cppcheck</span> <span class="op" style="color: #5E5E5E;">&lt;</span>...<span class="op" style="color: #5E5E5E;">&gt;</span> --suppress=<span class="pp" style="color: #AD0000;">*</span>:src/test_<span class="pp" style="color: #AD0000;">*</span>.cpp src</span></code></pre></div>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>It is actually somewhat surprising that there does not seem to be a canonical linter for C++ code in {Rcpp} packages. The methods laid out here are an initial implementation developed for use with the {finalsize} package, and the considerations here are a starting point. We shall be continuously evaluating how we ensure the quality of our C++ code as we encounter more use cases while developing future Epiverse-TRACE packages.</p>


</section>

 ]]></description>
  <category>code quality</category>
  <category>R package</category>
  <category>Rcpp</category>
  <guid>https://epiverse-trace.github.io/posts/lint-rcpp/index.html</guid>
  <pubDate>Fri, 02 Dec 2022 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
